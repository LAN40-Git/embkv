// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "proto/rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace embkv {
PROTOBUF_CONSTEXPR PersistentState::PersistentState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.current_term_)*/uint64_t{0u}
  , /*decltype(_impl_.voted_for_)*/uint64_t{0u}
  , /*decltype(_impl_.last_applied_)*/uint64_t{0u}} {}
struct PersistentStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersistentStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersistentStateDefaultTypeInternal() {}
  union {
    PersistentState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersistentStateDefaultTypeInternal _PersistentState_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_id_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.content_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_CONSTEXPR LogEntry::LogEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_request_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.term_)*/uint64_t{0u}
  , /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryDefaultTypeInternal _LogEntry_default_instance_;
PROTOBUF_CONSTEXPR VoteRequest::VoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/uint64_t{0u}
  , /*decltype(_impl_.last_log_index_)*/uint64_t{0u}
  , /*decltype(_impl_.last_log_term_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteRequestDefaultTypeInternal() {}
  union {
    VoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteRequestDefaultTypeInternal _VoteRequest_default_instance_;
PROTOBUF_CONSTEXPR VoteReply::VoteReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/uint64_t{0u}
  , /*decltype(_impl_.granted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoteReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteReplyDefaultTypeInternal() {}
  union {
    VoteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteReplyDefaultTypeInternal _VoteReply_default_instance_;
PROTOBUF_CONSTEXPR AppendEntriesRequest::AppendEntriesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.term_)*/uint64_t{0u}
  , /*decltype(_impl_.prev_log_index_)*/uint64_t{0u}
  , /*decltype(_impl_.prev_log_term_)*/uint64_t{0u}
  , /*decltype(_impl_.leader_commit_)*/uint64_t{0u}
  , /*decltype(_impl_.is_heartbeat_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendEntriesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesRequestDefaultTypeInternal() {}
  union {
    AppendEntriesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
PROTOBUF_CONSTEXPR AppendEntriesReply::AppendEntriesReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/uint64_t{0u}
  , /*decltype(_impl_.conflict_index_)*/uint64_t{0u}
  , /*decltype(_impl_.last_log_index_)*/uint64_t{0u}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendEntriesReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesReplyDefaultTypeInternal() {}
  union {
    AppendEntriesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
PROTOBUF_CONSTEXPR InstallSnapshotRequest::InstallSnapshotRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.snapshot_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.term_)*/uint64_t{0u}
  , /*decltype(_impl_.snapshot_index_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstallSnapshotRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstallSnapshotRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstallSnapshotRequestDefaultTypeInternal() {}
  union {
    InstallSnapshotRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstallSnapshotRequestDefaultTypeInternal _InstallSnapshotRequest_default_instance_;
PROTOBUF_CONSTEXPR InstallSnapshotReply::InstallSnapshotReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InstallSnapshotReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstallSnapshotReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstallSnapshotReplyDefaultTypeInternal() {}
  union {
    InstallSnapshotReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstallSnapshotReplyDefaultTypeInternal _InstallSnapshotReply_default_instance_;
PROTOBUF_CONSTEXPR ClientRequest::ClientRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientRequestDefaultTypeInternal() {}
  union {
    ClientRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
PROTOBUF_CONSTEXPR ClientReply::ClientReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/uint64_t{0u}
  , /*decltype(_impl_.leader_hint_)*/uint64_t{0u}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientReplyDefaultTypeInternal() {}
  union {
    ClientReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientReplyDefaultTypeInternal _ClientReply_default_instance_;
}  // namespace embkv
static ::_pb::Metadata file_level_metadata_rpc_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rpc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_2eproto = nullptr;

const uint32_t TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::embkv::PersistentState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::embkv::PersistentState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::PersistentState, _impl_.current_term_),
  PROTOBUF_FIELD_OFFSET(::embkv::PersistentState, _impl_.voted_for_),
  PROTOBUF_FIELD_OFFSET(::embkv::PersistentState, _impl_.last_applied_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::embkv::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::embkv::Message, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::Message, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::embkv::Message, _impl_.timestamp_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::embkv::Message, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::embkv::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::LogEntry, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::embkv::LogEntry, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::embkv::LogEntry, _impl_.client_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::embkv::VoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::VoteRequest, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::embkv::VoteRequest, _impl_.last_log_index_),
  PROTOBUF_FIELD_OFFSET(::embkv::VoteRequest, _impl_.last_log_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::embkv::VoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::VoteReply, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::embkv::VoteReply, _impl_.granted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesRequest, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesRequest, _impl_.prev_log_index_),
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesRequest, _impl_.prev_log_term_),
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesRequest, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesRequest, _impl_.leader_commit_),
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesRequest, _impl_.is_heartbeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesReply, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesReply, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesReply, _impl_.conflict_index_),
  PROTOBUF_FIELD_OFFSET(::embkv::AppendEntriesReply, _impl_.last_log_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::embkv::InstallSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::InstallSnapshotRequest, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::embkv::InstallSnapshotRequest, _impl_.snapshot_index_),
  PROTOBUF_FIELD_OFFSET(::embkv::InstallSnapshotRequest, _impl_.snapshot_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::embkv::InstallSnapshotReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::InstallSnapshotReply, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::embkv::ClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::ClientRequest, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::embkv::ClientRequest, _impl_.command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::embkv::ClientReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::embkv::ClientReply, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::embkv::ClientReply, _impl_.leader_hint_),
  PROTOBUF_FIELD_OFFSET(::embkv::ClientReply, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::embkv::ClientReply, _impl_.result_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::embkv::PersistentState)},
  { 12, -1, -1, sizeof(::embkv::Message)},
  { 29, -1, -1, sizeof(::embkv::LogEntry)},
  { 38, -1, -1, sizeof(::embkv::VoteRequest)},
  { 47, -1, -1, sizeof(::embkv::VoteReply)},
  { 55, -1, -1, sizeof(::embkv::AppendEntriesRequest)},
  { 67, -1, -1, sizeof(::embkv::AppendEntriesReply)},
  { 77, -1, -1, sizeof(::embkv::InstallSnapshotRequest)},
  { 86, -1, -1, sizeof(::embkv::InstallSnapshotReply)},
  { 93, -1, -1, sizeof(::embkv::ClientRequest)},
  { 101, -1, -1, sizeof(::embkv::ClientReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::embkv::_PersistentState_default_instance_._instance,
  &::embkv::_Message_default_instance_._instance,
  &::embkv::_LogEntry_default_instance_._instance,
  &::embkv::_VoteRequest_default_instance_._instance,
  &::embkv::_VoteReply_default_instance_._instance,
  &::embkv::_AppendEntriesRequest_default_instance_._instance,
  &::embkv::_AppendEntriesReply_default_instance_._instance,
  &::embkv::_InstallSnapshotRequest_default_instance_._instance,
  &::embkv::_InstallSnapshotReply_default_instance_._instance,
  &::embkv::_ClientRequest_default_instance_._instance,
  &::embkv::_ClientReply_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\trpc.proto\022\005embkv\"c\n\017PersistentState\022\024\n"
  "\014current_term\030\001 \001(\004\022\026\n\tvoted_for\030\002 \001(\004H\000"
  "\210\001\001\022\024\n\014last_applied\030\003 \001(\004B\014\n\n_voted_for\""
  "\324\003\n\007Message\022\017\n\007node_id\030\001 \001(\004\022\021\n\ttimestam"
  "p\030\002 \001(\004\022*\n\014vote_request\030\003 \001(\0132\022.embkv.Vo"
  "teRequestH\000\022&\n\nvote_reply\030\004 \001(\0132\020.embkv."
  "VoteReplyH\000\022=\n\026append_entries_request\030\005 "
  "\001(\0132\033.embkv.AppendEntriesRequestH\000\0229\n\024ap"
  "pend_entries_reply\030\006 \001(\0132\031.embkv.AppendE"
  "ntriesReplyH\000\0229\n\020snapshot_request\030\007 \001(\0132"
  "\035.embkv.InstallSnapshotRequestH\000\0225\n\016snap"
  "shot_reply\030\010 \001(\0132\033.embkv.InstallSnapshot"
  "ReplyH\000\022.\n\016client_request\030\t \001(\0132\024.embkv."
  "ClientRequestH\000\022*\n\014client_reply\030\n \001(\0132\022."
  "embkv.ClientReplyH\000B\t\n\007content\"\?\n\010LogEnt"
  "ry\022\014\n\004term\030\001 \001(\004\022\r\n\005index\030\002 \001(\004\022\026\n\016clien"
  "t_request\030\003 \001(\014\"J\n\013VoteRequest\022\014\n\004term\030\001"
  " \001(\004\022\026\n\016last_log_index\030\002 \001(\004\022\025\n\rlast_log"
  "_term\030\003 \001(\004\"*\n\tVoteReply\022\014\n\004term\030\001 \001(\004\022\017"
  "\n\007granted\030\002 \001(\010\"\242\001\n\024AppendEntriesRequest"
  "\022\014\n\004term\030\001 \001(\004\022\026\n\016prev_log_index\030\002 \001(\004\022\025"
  "\n\rprev_log_term\030\003 \001(\004\022 \n\007entries\030\004 \003(\0132\017"
  ".embkv.LogEntry\022\025\n\rleader_commit\030\005 \001(\004\022\024"
  "\n\014is_heartbeat\030\006 \001(\010\"c\n\022AppendEntriesRep"
  "ly\022\014\n\004term\030\001 \001(\004\022\017\n\007success\030\002 \001(\010\022\026\n\016con"
  "flict_index\030\003 \001(\004\022\026\n\016last_log_index\030\004 \001("
  "\004\"U\n\026InstallSnapshotRequest\022\014\n\004term\030\001 \001("
  "\004\022\026\n\016snapshot_index\030\002 \001(\004\022\025\n\rsnapshot_da"
  "ta\030\003 \001(\014\"\'\n\024InstallSnapshotReply\022\017\n\007succ"
  "ess\030\001 \001(\010\"4\n\rClientRequest\022\022\n\nrequest_id"
  "\030\001 \001(\004\022\017\n\007command\030\002 \001(\014\"W\n\013ClientReply\022\022"
  "\n\nrequest_id\030\001 \001(\004\022\023\n\013leader_hint\030\002 \001(\004\022"
  "\017\n\007success\030\003 \001(\010\022\016\n\006result\030\004 \001(\014b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_rpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_2eproto = {
    false, false, 1320, descriptor_table_protodef_rpc_2eproto,
    "rpc.proto",
    &descriptor_table_rpc_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_rpc_2eproto::offsets,
    file_level_metadata_rpc_2eproto, file_level_enum_descriptors_rpc_2eproto,
    file_level_service_descriptors_rpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_2eproto_getter() {
  return &descriptor_table_rpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_2eproto(&descriptor_table_rpc_2eproto);
namespace embkv {

// ===================================================================

class PersistentState::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistentState>()._impl_._has_bits_);
  static void set_has_voted_for(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PersistentState::PersistentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.PersistentState)
}
PersistentState::PersistentState(const PersistentState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PersistentState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_term_){}
    , decltype(_impl_.voted_for_){}
    , decltype(_impl_.last_applied_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.current_term_, &from._impl_.current_term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_applied_) -
    reinterpret_cast<char*>(&_impl_.current_term_)) + sizeof(_impl_.last_applied_));
  // @@protoc_insertion_point(copy_constructor:embkv.PersistentState)
}

inline void PersistentState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_term_){uint64_t{0u}}
    , decltype(_impl_.voted_for_){uint64_t{0u}}
    , decltype(_impl_.last_applied_){uint64_t{0u}}
  };
}

PersistentState::~PersistentState() {
  // @@protoc_insertion_point(destructor:embkv.PersistentState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PersistentState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PersistentState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PersistentState::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.PersistentState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_term_ = uint64_t{0u};
  _impl_.voted_for_ = uint64_t{0u};
  _impl_.last_applied_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersistentState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 current_term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.current_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 voted_for = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_voted_for(&has_bits);
          _impl_.voted_for_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_applied = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_applied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PersistentState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.PersistentState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 current_term = 1;
  if (this->_internal_current_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_current_term(), target);
  }

  // optional uint64 voted_for = 2;
  if (_internal_has_voted_for()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_voted_for(), target);
  }

  // uint64 last_applied = 3;
  if (this->_internal_last_applied() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_applied(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.PersistentState)
  return target;
}

size_t PersistentState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.PersistentState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 current_term = 1;
  if (this->_internal_current_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_current_term());
  }

  // optional uint64 voted_for = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_voted_for());
  }

  // uint64 last_applied = 3;
  if (this->_internal_last_applied() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_applied());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PersistentState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PersistentState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PersistentState::GetClassData() const { return &_class_data_; }


void PersistentState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PersistentState*>(&to_msg);
  auto& from = static_cast<const PersistentState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.PersistentState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_current_term() != 0) {
    _this->_internal_set_current_term(from._internal_current_term());
  }
  if (from._internal_has_voted_for()) {
    _this->_internal_set_voted_for(from._internal_voted_for());
  }
  if (from._internal_last_applied() != 0) {
    _this->_internal_set_last_applied(from._internal_last_applied());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PersistentState::CopyFrom(const PersistentState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.PersistentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistentState::IsInitialized() const {
  return true;
}

void PersistentState::InternalSwap(PersistentState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersistentState, _impl_.last_applied_)
      + sizeof(PersistentState::_impl_.last_applied_)
      - PROTOBUF_FIELD_OFFSET(PersistentState, _impl_.current_term_)>(
          reinterpret_cast<char*>(&_impl_.current_term_),
          reinterpret_cast<char*>(&other->_impl_.current_term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersistentState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[0]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::embkv::VoteRequest& vote_request(const Message* msg);
  static const ::embkv::VoteReply& vote_reply(const Message* msg);
  static const ::embkv::AppendEntriesRequest& append_entries_request(const Message* msg);
  static const ::embkv::AppendEntriesReply& append_entries_reply(const Message* msg);
  static const ::embkv::InstallSnapshotRequest& snapshot_request(const Message* msg);
  static const ::embkv::InstallSnapshotReply& snapshot_reply(const Message* msg);
  static const ::embkv::ClientRequest& client_request(const Message* msg);
  static const ::embkv::ClientReply& client_reply(const Message* msg);
};

const ::embkv::VoteRequest&
Message::_Internal::vote_request(const Message* msg) {
  return *msg->_impl_.content_.vote_request_;
}
const ::embkv::VoteReply&
Message::_Internal::vote_reply(const Message* msg) {
  return *msg->_impl_.content_.vote_reply_;
}
const ::embkv::AppendEntriesRequest&
Message::_Internal::append_entries_request(const Message* msg) {
  return *msg->_impl_.content_.append_entries_request_;
}
const ::embkv::AppendEntriesReply&
Message::_Internal::append_entries_reply(const Message* msg) {
  return *msg->_impl_.content_.append_entries_reply_;
}
const ::embkv::InstallSnapshotRequest&
Message::_Internal::snapshot_request(const Message* msg) {
  return *msg->_impl_.content_.snapshot_request_;
}
const ::embkv::InstallSnapshotReply&
Message::_Internal::snapshot_reply(const Message* msg) {
  return *msg->_impl_.content_.snapshot_reply_;
}
const ::embkv::ClientRequest&
Message::_Internal::client_request(const Message* msg) {
  return *msg->_impl_.content_.client_request_;
}
const ::embkv::ClientReply&
Message::_Internal::client_reply(const Message* msg) {
  return *msg->_impl_.content_.client_reply_;
}
void Message::set_allocated_vote_request(::embkv::VoteRequest* vote_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (vote_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vote_request);
    if (message_arena != submessage_arena) {
      vote_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_request, submessage_arena);
    }
    set_has_vote_request();
    _impl_.content_.vote_request_ = vote_request;
  }
  // @@protoc_insertion_point(field_set_allocated:embkv.Message.vote_request)
}
void Message::set_allocated_vote_reply(::embkv::VoteReply* vote_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (vote_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vote_reply);
    if (message_arena != submessage_arena) {
      vote_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_reply, submessage_arena);
    }
    set_has_vote_reply();
    _impl_.content_.vote_reply_ = vote_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:embkv.Message.vote_reply)
}
void Message::set_allocated_append_entries_request(::embkv::AppendEntriesRequest* append_entries_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (append_entries_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(append_entries_request);
    if (message_arena != submessage_arena) {
      append_entries_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, append_entries_request, submessage_arena);
    }
    set_has_append_entries_request();
    _impl_.content_.append_entries_request_ = append_entries_request;
  }
  // @@protoc_insertion_point(field_set_allocated:embkv.Message.append_entries_request)
}
void Message::set_allocated_append_entries_reply(::embkv::AppendEntriesReply* append_entries_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (append_entries_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(append_entries_reply);
    if (message_arena != submessage_arena) {
      append_entries_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, append_entries_reply, submessage_arena);
    }
    set_has_append_entries_reply();
    _impl_.content_.append_entries_reply_ = append_entries_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:embkv.Message.append_entries_reply)
}
void Message::set_allocated_snapshot_request(::embkv::InstallSnapshotRequest* snapshot_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (snapshot_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(snapshot_request);
    if (message_arena != submessage_arena) {
      snapshot_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot_request, submessage_arena);
    }
    set_has_snapshot_request();
    _impl_.content_.snapshot_request_ = snapshot_request;
  }
  // @@protoc_insertion_point(field_set_allocated:embkv.Message.snapshot_request)
}
void Message::set_allocated_snapshot_reply(::embkv::InstallSnapshotReply* snapshot_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (snapshot_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(snapshot_reply);
    if (message_arena != submessage_arena) {
      snapshot_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot_reply, submessage_arena);
    }
    set_has_snapshot_reply();
    _impl_.content_.snapshot_reply_ = snapshot_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:embkv.Message.snapshot_reply)
}
void Message::set_allocated_client_request(::embkv::ClientRequest* client_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (client_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_request);
    if (message_arena != submessage_arena) {
      client_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_request, submessage_arena);
    }
    set_has_client_request();
    _impl_.content_.client_request_ = client_request;
  }
  // @@protoc_insertion_point(field_set_allocated:embkv.Message.client_request)
}
void Message::set_allocated_client_reply(::embkv::ClientReply* client_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (client_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_reply);
    if (message_arena != submessage_arena) {
      client_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_reply, submessage_arena);
    }
    set_has_client_reply();
    _impl_.content_.client_reply_ = client_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:embkv.Message.client_reply)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.node_id_, &from._impl_.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.timestamp_));
  clear_has_content();
  switch (from.content_case()) {
    case kVoteRequest: {
      _this->_internal_mutable_vote_request()->::embkv::VoteRequest::MergeFrom(
          from._internal_vote_request());
      break;
    }
    case kVoteReply: {
      _this->_internal_mutable_vote_reply()->::embkv::VoteReply::MergeFrom(
          from._internal_vote_reply());
      break;
    }
    case kAppendEntriesRequest: {
      _this->_internal_mutable_append_entries_request()->::embkv::AppendEntriesRequest::MergeFrom(
          from._internal_append_entries_request());
      break;
    }
    case kAppendEntriesReply: {
      _this->_internal_mutable_append_entries_reply()->::embkv::AppendEntriesReply::MergeFrom(
          from._internal_append_entries_reply());
      break;
    }
    case kSnapshotRequest: {
      _this->_internal_mutable_snapshot_request()->::embkv::InstallSnapshotRequest::MergeFrom(
          from._internal_snapshot_request());
      break;
    }
    case kSnapshotReply: {
      _this->_internal_mutable_snapshot_reply()->::embkv::InstallSnapshotReply::MergeFrom(
          from._internal_snapshot_reply());
      break;
    }
    case kClientRequest: {
      _this->_internal_mutable_client_request()->::embkv::ClientRequest::MergeFrom(
          from._internal_client_request());
      break;
    }
    case kClientReply: {
      _this->_internal_mutable_client_reply()->::embkv::ClientReply::MergeFrom(
          from._internal_client_reply());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:embkv.Message)
}

inline void Message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_content();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:embkv.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_content()) {
    clear_content();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:embkv.Message)
  switch (content_case()) {
    case kVoteRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.vote_request_;
      }
      break;
    }
    case kVoteReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.vote_reply_;
      }
      break;
    }
    case kAppendEntriesRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.append_entries_request_;
      }
      break;
    }
    case kAppendEntriesReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.append_entries_reply_;
      }
      break;
    }
    case kSnapshotRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.snapshot_request_;
      }
      break;
    }
    case kSnapshotReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.snapshot_reply_;
      }
      break;
    }
    case kClientRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.client_request_;
      }
      break;
    }
    case kClientReply: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.client_reply_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.timestamp_));
  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .embkv.VoteRequest vote_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .embkv.VoteReply vote_reply = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .embkv.AppendEntriesRequest append_entries_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_append_entries_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .embkv.AppendEntriesReply append_entries_reply = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_append_entries_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .embkv.InstallSnapshotRequest snapshot_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .embkv.InstallSnapshotReply snapshot_reply = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .embkv.ClientRequest client_request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .embkv.ClientReply client_reply = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_reply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_node_id(), target);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .embkv.VoteRequest vote_request = 3;
  if (_internal_has_vote_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vote_request(this),
        _Internal::vote_request(this).GetCachedSize(), target, stream);
  }

  // .embkv.VoteReply vote_reply = 4;
  if (_internal_has_vote_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vote_reply(this),
        _Internal::vote_reply(this).GetCachedSize(), target, stream);
  }

  // .embkv.AppendEntriesRequest append_entries_request = 5;
  if (_internal_has_append_entries_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::append_entries_request(this),
        _Internal::append_entries_request(this).GetCachedSize(), target, stream);
  }

  // .embkv.AppendEntriesReply append_entries_reply = 6;
  if (_internal_has_append_entries_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::append_entries_reply(this),
        _Internal::append_entries_reply(this).GetCachedSize(), target, stream);
  }

  // .embkv.InstallSnapshotRequest snapshot_request = 7;
  if (_internal_has_snapshot_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::snapshot_request(this),
        _Internal::snapshot_request(this).GetCachedSize(), target, stream);
  }

  // .embkv.InstallSnapshotReply snapshot_reply = 8;
  if (_internal_has_snapshot_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::snapshot_reply(this),
        _Internal::snapshot_reply(this).GetCachedSize(), target, stream);
  }

  // .embkv.ClientRequest client_request = 9;
  if (_internal_has_client_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::client_request(this),
        _Internal::client_request(this).GetCachedSize(), target, stream);
  }

  // .embkv.ClientReply client_reply = 10;
  if (_internal_has_client_reply()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::client_reply(this),
        _Internal::client_reply(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 node_id = 1;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_node_id());
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  switch (content_case()) {
    // .embkv.VoteRequest vote_request = 3;
    case kVoteRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.vote_request_);
      break;
    }
    // .embkv.VoteReply vote_reply = 4;
    case kVoteReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.vote_reply_);
      break;
    }
    // .embkv.AppendEntriesRequest append_entries_request = 5;
    case kAppendEntriesRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.append_entries_request_);
      break;
    }
    // .embkv.AppendEntriesReply append_entries_reply = 6;
    case kAppendEntriesReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.append_entries_reply_);
      break;
    }
    // .embkv.InstallSnapshotRequest snapshot_request = 7;
    case kSnapshotRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.snapshot_request_);
      break;
    }
    // .embkv.InstallSnapshotReply snapshot_reply = 8;
    case kSnapshotReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.snapshot_reply_);
      break;
    }
    // .embkv.ClientRequest client_request = 9;
    case kClientRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.client_request_);
      break;
    }
    // .embkv.ClientReply client_reply = 10;
    case kClientReply: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.client_reply_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.Message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.content_case()) {
    case kVoteRequest: {
      _this->_internal_mutable_vote_request()->::embkv::VoteRequest::MergeFrom(
          from._internal_vote_request());
      break;
    }
    case kVoteReply: {
      _this->_internal_mutable_vote_reply()->::embkv::VoteReply::MergeFrom(
          from._internal_vote_reply());
      break;
    }
    case kAppendEntriesRequest: {
      _this->_internal_mutable_append_entries_request()->::embkv::AppendEntriesRequest::MergeFrom(
          from._internal_append_entries_request());
      break;
    }
    case kAppendEntriesReply: {
      _this->_internal_mutable_append_entries_reply()->::embkv::AppendEntriesReply::MergeFrom(
          from._internal_append_entries_reply());
      break;
    }
    case kSnapshotRequest: {
      _this->_internal_mutable_snapshot_request()->::embkv::InstallSnapshotRequest::MergeFrom(
          from._internal_snapshot_request());
      break;
    }
    case kSnapshotReply: {
      _this->_internal_mutable_snapshot_reply()->::embkv::InstallSnapshotReply::MergeFrom(
          from._internal_snapshot_reply());
      break;
    }
    case kClientRequest: {
      _this->_internal_mutable_client_request()->::embkv::ClientRequest::MergeFrom(
          from._internal_client_request());
      break;
    }
    case kClientReply: {
      _this->_internal_mutable_client_reply()->::embkv::ClientReply::MergeFrom(
          from._internal_client_reply());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message, _impl_.timestamp_)
      + sizeof(Message::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Message, _impl_.node_id_)>(
          reinterpret_cast<char*>(&_impl_.node_id_),
          reinterpret_cast<char*>(&other->_impl_.node_id_));
  swap(_impl_.content_, other->_impl_.content_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[1]);
}

// ===================================================================

class LogEntry::_Internal {
 public:
};

LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_request_){}
    , decltype(_impl_.term_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_request().empty()) {
    _this->_impl_.client_request_.Set(from._internal_client_request(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:embkv.LogEntry)
}

inline void LogEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_request_){}
    , decltype(_impl_.term_){uint64_t{0u}}
    , decltype(_impl_.index_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:embkv.LogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_request_.Destroy();
}

void LogEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.LogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_request_.ClearToEmpty();
  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes client_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.LogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // uint64 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_index(), target);
  }

  // bytes client_request = 3;
  if (!this->_internal_client_request().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_client_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.LogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes client_request = 3;
  if (!this->_internal_client_request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_client_request());
  }

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEntry::GetClassData() const { return &_class_data_; }


void LogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogEntry*>(&to_msg);
  auto& from = static_cast<const LogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.LogEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_request().empty()) {
    _this->_internal_set_client_request(from._internal_client_request());
  }
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_request_, lhs_arena,
      &other->_impl_.client_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.index_)
      + sizeof(LogEntry::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[2]);
}

// ===================================================================

class VoteRequest::_Internal {
 public:
};

VoteRequest::VoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.VoteRequest)
}
VoteRequest::VoteRequest(const VoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.last_log_index_){}
    , decltype(_impl_.last_log_term_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_log_term_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.last_log_term_));
  // @@protoc_insertion_point(copy_constructor:embkv.VoteRequest)
}

inline void VoteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){uint64_t{0u}}
    , decltype(_impl_.last_log_index_){uint64_t{0u}}
    , decltype(_impl_.last_log_term_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VoteRequest::~VoteRequest() {
  // @@protoc_insertion_point(destructor:embkv.VoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.VoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_log_term_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.last_log_term_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_log_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.last_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_log_term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.VoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // uint64 last_log_index = 2;
  if (this->_internal_last_log_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_log_index(), target);
  }

  // uint64 last_log_term = 3;
  if (this->_internal_last_log_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_log_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.VoteRequest)
  return target;
}

size_t VoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.VoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 last_log_index = 2;
  if (this->_internal_last_log_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_log_index());
  }

  // uint64 last_log_term = 3;
  if (this->_internal_last_log_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_log_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteRequest::GetClassData() const { return &_class_data_; }


void VoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteRequest*>(&to_msg);
  auto& from = static_cast<const VoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.VoteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_last_log_index() != 0) {
    _this->_internal_set_last_log_index(from._internal_last_log_index());
  }
  if (from._internal_last_log_term() != 0) {
    _this->_internal_set_last_log_term(from._internal_last_log_term());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteRequest::CopyFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRequest::IsInitialized() const {
  return true;
}

void VoteRequest::InternalSwap(VoteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteRequest, _impl_.last_log_term_)
      + sizeof(VoteRequest::_impl_.last_log_term_)
      - PROTOBUF_FIELD_OFFSET(VoteRequest, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[3]);
}

// ===================================================================

class VoteReply::_Internal {
 public:
};

VoteReply::VoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.VoteReply)
}
VoteReply::VoteReply(const VoteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.granted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.granted_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.granted_));
  // @@protoc_insertion_point(copy_constructor:embkv.VoteReply)
}

inline void VoteReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){uint64_t{0u}}
    , decltype(_impl_.granted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VoteReply::~VoteReply() {
  // @@protoc_insertion_point(destructor:embkv.VoteReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VoteReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.VoteReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.granted_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.granted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.VoteReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // bool granted = 2;
  if (this->_internal_granted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.VoteReply)
  return target;
}

size_t VoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.VoteReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // bool granted = 2;
  if (this->_internal_granted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteReply::GetClassData() const { return &_class_data_; }


void VoteReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteReply*>(&to_msg);
  auto& from = static_cast<const VoteReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.VoteReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_granted() != 0) {
    _this->_internal_set_granted(from._internal_granted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteReply::CopyFrom(const VoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.VoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteReply::IsInitialized() const {
  return true;
}

void VoteReply::InternalSwap(VoteReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteReply, _impl_.granted_)
      + sizeof(VoteReply::_impl_.granted_)
      - PROTOBUF_FIELD_OFFSET(VoteReply, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[4]);
}

// ===================================================================

class AppendEntriesRequest::_Internal {
 public:
};

AppendEntriesRequest::AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.AppendEntriesRequest)
}
AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendEntriesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.term_){}
    , decltype(_impl_.prev_log_index_){}
    , decltype(_impl_.prev_log_term_){}
    , decltype(_impl_.leader_commit_){}
    , decltype(_impl_.is_heartbeat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_heartbeat_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.is_heartbeat_));
  // @@protoc_insertion_point(copy_constructor:embkv.AppendEntriesRequest)
}

inline void AppendEntriesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.term_){uint64_t{0u}}
    , decltype(_impl_.prev_log_index_){uint64_t{0u}}
    , decltype(_impl_.prev_log_term_){uint64_t{0u}}
    , decltype(_impl_.leader_commit_){uint64_t{0u}}
    , decltype(_impl_.is_heartbeat_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:embkv.AppendEntriesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.AppendEntriesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_heartbeat_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.is_heartbeat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 prev_log_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.prev_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 prev_log_term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.prev_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .embkv.LogEntry entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 leader_commit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.leader_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_heartbeat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_heartbeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.AppendEntriesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // uint64 prev_log_index = 2;
  if (this->_internal_prev_log_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_prev_log_index(), target);
  }

  // uint64 prev_log_term = 3;
  if (this->_internal_prev_log_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_prev_log_term(), target);
  }

  // repeated .embkv.LogEntry entries = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 leader_commit = 5;
  if (this->_internal_leader_commit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_leader_commit(), target);
  }

  // bool is_heartbeat = 6;
  if (this->_internal_is_heartbeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_heartbeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.AppendEntriesRequest)
  return target;
}

size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.AppendEntriesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .embkv.LogEntry entries = 4;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 prev_log_index = 2;
  if (this->_internal_prev_log_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_prev_log_index());
  }

  // uint64 prev_log_term = 3;
  if (this->_internal_prev_log_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_prev_log_term());
  }

  // uint64 leader_commit = 5;
  if (this->_internal_leader_commit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leader_commit());
  }

  // bool is_heartbeat = 6;
  if (this->_internal_is_heartbeat() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendEntriesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesRequest::GetClassData() const { return &_class_data_; }


void AppendEntriesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendEntriesRequest*>(&to_msg);
  auto& from = static_cast<const AppendEntriesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_prev_log_index() != 0) {
    _this->_internal_set_prev_log_index(from._internal_prev_log_index());
  }
  if (from._internal_prev_log_term() != 0) {
    _this->_internal_set_prev_log_term(from._internal_prev_log_term());
  }
  if (from._internal_leader_commit() != 0) {
    _this->_internal_set_leader_commit(from._internal_leader_commit());
  }
  if (from._internal_is_heartbeat() != 0) {
    _this->_internal_set_is_heartbeat(from._internal_is_heartbeat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  return true;
}

void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.is_heartbeat_)
      + sizeof(AppendEntriesRequest::_impl_.is_heartbeat_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[5]);
}

// ===================================================================

class AppendEntriesReply::_Internal {
 public:
};

AppendEntriesReply::AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.AppendEntriesReply)
}
AppendEntriesReply::AppendEntriesReply(const AppendEntriesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendEntriesReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.conflict_index_){}
    , decltype(_impl_.last_log_index_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:embkv.AppendEntriesReply)
}

inline void AppendEntriesReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){uint64_t{0u}}
    , decltype(_impl_.conflict_index_){uint64_t{0u}}
    , decltype(_impl_.last_log_index_){uint64_t{0u}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:embkv.AppendEntriesReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.AppendEntriesReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 conflict_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.conflict_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_log_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.AppendEntriesReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // uint64 conflict_index = 3;
  if (this->_internal_conflict_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_conflict_index(), target);
  }

  // uint64 last_log_index = 4;
  if (this->_internal_last_log_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_last_log_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.AppendEntriesReply)
  return target;
}

size_t AppendEntriesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.AppendEntriesReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 conflict_index = 3;
  if (this->_internal_conflict_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_conflict_index());
  }

  // uint64 last_log_index = 4;
  if (this->_internal_last_log_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_log_index());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendEntriesReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesReply::GetClassData() const { return &_class_data_; }


void AppendEntriesReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendEntriesReply*>(&to_msg);
  auto& from = static_cast<const AppendEntriesReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_conflict_index() != 0) {
    _this->_internal_set_conflict_index(from._internal_conflict_index());
  }
  if (from._internal_last_log_index() != 0) {
    _this->_internal_set_last_log_index(from._internal_last_log_index());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReply::IsInitialized() const {
  return true;
}

void AppendEntriesReply::InternalSwap(AppendEntriesReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.success_)
      + sizeof(AppendEntriesReply::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesReply, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[6]);
}

// ===================================================================

class InstallSnapshotRequest::_Internal {
 public:
};

InstallSnapshotRequest::InstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.InstallSnapshotRequest)
}
InstallSnapshotRequest::InstallSnapshotRequest(const InstallSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstallSnapshotRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.snapshot_data_){}
    , decltype(_impl_.term_){}
    , decltype(_impl_.snapshot_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.snapshot_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snapshot_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_snapshot_data().empty()) {
    _this->_impl_.snapshot_data_.Set(from._internal_snapshot_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.snapshot_index_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.snapshot_index_));
  // @@protoc_insertion_point(copy_constructor:embkv.InstallSnapshotRequest)
}

inline void InstallSnapshotRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.snapshot_data_){}
    , decltype(_impl_.term_){uint64_t{0u}}
    , decltype(_impl_.snapshot_index_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.snapshot_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snapshot_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InstallSnapshotRequest::~InstallSnapshotRequest() {
  // @@protoc_insertion_point(destructor:embkv.InstallSnapshotRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstallSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.snapshot_data_.Destroy();
}

void InstallSnapshotRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstallSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.InstallSnapshotRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.snapshot_data_.ClearToEmpty();
  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.snapshot_index_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.snapshot_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallSnapshotRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 snapshot_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.snapshot_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes snapshot_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_snapshot_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstallSnapshotRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.InstallSnapshotRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // uint64 snapshot_index = 2;
  if (this->_internal_snapshot_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_snapshot_index(), target);
  }

  // bytes snapshot_data = 3;
  if (!this->_internal_snapshot_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_snapshot_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.InstallSnapshotRequest)
  return target;
}

size_t InstallSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.InstallSnapshotRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes snapshot_data = 3;
  if (!this->_internal_snapshot_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_snapshot_data());
  }

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 snapshot_index = 2;
  if (this->_internal_snapshot_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_snapshot_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstallSnapshotRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstallSnapshotRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstallSnapshotRequest::GetClassData() const { return &_class_data_; }


void InstallSnapshotRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstallSnapshotRequest*>(&to_msg);
  auto& from = static_cast<const InstallSnapshotRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.InstallSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_snapshot_data().empty()) {
    _this->_internal_set_snapshot_data(from._internal_snapshot_data());
  }
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_snapshot_index() != 0) {
    _this->_internal_set_snapshot_index(from._internal_snapshot_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstallSnapshotRequest::CopyFrom(const InstallSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.InstallSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotRequest::IsInitialized() const {
  return true;
}

void InstallSnapshotRequest::InternalSwap(InstallSnapshotRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.snapshot_data_, lhs_arena,
      &other->_impl_.snapshot_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstallSnapshotRequest, _impl_.snapshot_index_)
      + sizeof(InstallSnapshotRequest::_impl_.snapshot_index_)
      - PROTOBUF_FIELD_OFFSET(InstallSnapshotRequest, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallSnapshotRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[7]);
}

// ===================================================================

class InstallSnapshotReply::_Internal {
 public:
};

InstallSnapshotReply::InstallSnapshotReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.InstallSnapshotReply)
}
InstallSnapshotReply::InstallSnapshotReply(const InstallSnapshotReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InstallSnapshotReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:embkv.InstallSnapshotReply)
}

inline void InstallSnapshotReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InstallSnapshotReply::~InstallSnapshotReply() {
  // @@protoc_insertion_point(destructor:embkv.InstallSnapshotReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InstallSnapshotReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InstallSnapshotReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InstallSnapshotReply::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.InstallSnapshotReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallSnapshotReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstallSnapshotReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.InstallSnapshotReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.InstallSnapshotReply)
  return target;
}

size_t InstallSnapshotReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.InstallSnapshotReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstallSnapshotReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InstallSnapshotReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstallSnapshotReply::GetClassData() const { return &_class_data_; }


void InstallSnapshotReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InstallSnapshotReply*>(&to_msg);
  auto& from = static_cast<const InstallSnapshotReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.InstallSnapshotReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstallSnapshotReply::CopyFrom(const InstallSnapshotReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.InstallSnapshotReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallSnapshotReply::IsInitialized() const {
  return true;
}

void InstallSnapshotReply::InternalSwap(InstallSnapshotReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallSnapshotReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[8]);
}

// ===================================================================

class ClientRequest::_Internal {
 public:
};

ClientRequest::ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.ClientRequest)
}
ClientRequest::ClientRequest(const ClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.request_id_ = from._impl_.request_id_;
  // @@protoc_insertion_point(copy_constructor:embkv.ClientRequest)
}

inline void ClientRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.request_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:embkv.ClientRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_.Destroy();
}

void ClientRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.ClientRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_.ClearToEmpty();
  _impl_.request_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.ClientRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_request_id(), target);
  }

  // bytes command = 2;
  if (!this->_internal_command().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.ClientRequest)
  return target;
}

size_t ClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.ClientRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes command = 2;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());
  }

  // uint64 request_id = 1;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientRequest::GetClassData() const { return &_class_data_; }


void ClientRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientRequest*>(&to_msg);
  auto& from = static_cast<const ClientRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.ClientRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {
  return true;
}

void ClientRequest::InternalSwap(ClientRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  swap(_impl_.request_id_, other->_impl_.request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[9]);
}

// ===================================================================

class ClientReply::_Internal {
 public:
};

ClientReply::ClientReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:embkv.ClientReply)
}
ClientReply::ClientReply(const ClientReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.leader_hint_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.request_id_, &from._impl_.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:embkv.ClientReply)
}

inline void ClientReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.request_id_){uint64_t{0u}}
    , decltype(_impl_.leader_hint_){uint64_t{0u}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientReply::~ClientReply() {
  // @@protoc_insertion_point(destructor:embkv.ClientReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
}

void ClientReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientReply::Clear() {
// @@protoc_insertion_point(message_clear_start:embkv.ClientReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  ::memset(&_impl_.request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 leader_hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.leader_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:embkv.ClientReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_request_id(), target);
  }

  // uint64 leader_hint = 2;
  if (this->_internal_leader_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_leader_hint(), target);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  // bytes result = 4;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:embkv.ClientReply)
  return target;
}

size_t ClientReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:embkv.ClientReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 4;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  // uint64 request_id = 1;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_request_id());
  }

  // uint64 leader_hint = 2;
  if (this->_internal_leader_hint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_leader_hint());
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientReply::GetClassData() const { return &_class_data_; }


void ClientReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientReply*>(&to_msg);
  auto& from = static_cast<const ClientReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:embkv.ClientReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_leader_hint() != 0) {
    _this->_internal_set_leader_hint(from._internal_leader_hint());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientReply::CopyFrom(const ClientReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:embkv.ClientReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReply::IsInitialized() const {
  return true;
}

void ClientReply::InternalSwap(ClientReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientReply, _impl_.success_)
      + sizeof(ClientReply::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(ClientReply, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace embkv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::embkv::PersistentState*
Arena::CreateMaybeMessage< ::embkv::PersistentState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::PersistentState >(arena);
}
template<> PROTOBUF_NOINLINE ::embkv::Message*
Arena::CreateMaybeMessage< ::embkv::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::embkv::LogEntry*
Arena::CreateMaybeMessage< ::embkv::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::embkv::VoteRequest*
Arena::CreateMaybeMessage< ::embkv::VoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::VoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::embkv::VoteReply*
Arena::CreateMaybeMessage< ::embkv::VoteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::VoteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::embkv::AppendEntriesRequest*
Arena::CreateMaybeMessage< ::embkv::AppendEntriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::AppendEntriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::embkv::AppendEntriesReply*
Arena::CreateMaybeMessage< ::embkv::AppendEntriesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::AppendEntriesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::embkv::InstallSnapshotRequest*
Arena::CreateMaybeMessage< ::embkv::InstallSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::InstallSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::embkv::InstallSnapshotReply*
Arena::CreateMaybeMessage< ::embkv::InstallSnapshotReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::InstallSnapshotReply >(arena);
}
template<> PROTOBUF_NOINLINE ::embkv::ClientRequest*
Arena::CreateMaybeMessage< ::embkv::ClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::ClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::embkv::ClientReply*
Arena::CreateMaybeMessage< ::embkv::ClientReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::embkv::ClientReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
