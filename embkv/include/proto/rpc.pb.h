// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace embkv {
class AppendEntriesReply;
struct AppendEntriesReplyDefaultTypeInternal;
extern AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
class AppendEntriesRequest;
struct AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class ClientReply;
struct ClientReplyDefaultTypeInternal;
extern ClientReplyDefaultTypeInternal _ClientReply_default_instance_;
class ClientRequest;
struct ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class InstallSnapshotReply;
struct InstallSnapshotReplyDefaultTypeInternal;
extern InstallSnapshotReplyDefaultTypeInternal _InstallSnapshotReply_default_instance_;
class InstallSnapshotRequest;
struct InstallSnapshotRequestDefaultTypeInternal;
extern InstallSnapshotRequestDefaultTypeInternal _InstallSnapshotRequest_default_instance_;
class LogEntry;
struct LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PersistentState;
struct PersistentStateDefaultTypeInternal;
extern PersistentStateDefaultTypeInternal _PersistentState_default_instance_;
class VoteReply;
struct VoteReplyDefaultTypeInternal;
extern VoteReplyDefaultTypeInternal _VoteReply_default_instance_;
class VoteRequest;
struct VoteRequestDefaultTypeInternal;
extern VoteRequestDefaultTypeInternal _VoteRequest_default_instance_;
}  // namespace embkv
PROTOBUF_NAMESPACE_OPEN
template<> ::embkv::AppendEntriesReply* Arena::CreateMaybeMessage<::embkv::AppendEntriesReply>(Arena*);
template<> ::embkv::AppendEntriesRequest* Arena::CreateMaybeMessage<::embkv::AppendEntriesRequest>(Arena*);
template<> ::embkv::ClientReply* Arena::CreateMaybeMessage<::embkv::ClientReply>(Arena*);
template<> ::embkv::ClientRequest* Arena::CreateMaybeMessage<::embkv::ClientRequest>(Arena*);
template<> ::embkv::InstallSnapshotReply* Arena::CreateMaybeMessage<::embkv::InstallSnapshotReply>(Arena*);
template<> ::embkv::InstallSnapshotRequest* Arena::CreateMaybeMessage<::embkv::InstallSnapshotRequest>(Arena*);
template<> ::embkv::LogEntry* Arena::CreateMaybeMessage<::embkv::LogEntry>(Arena*);
template<> ::embkv::Message* Arena::CreateMaybeMessage<::embkv::Message>(Arena*);
template<> ::embkv::PersistentState* Arena::CreateMaybeMessage<::embkv::PersistentState>(Arena*);
template<> ::embkv::VoteReply* Arena::CreateMaybeMessage<::embkv::VoteReply>(Arena*);
template<> ::embkv::VoteRequest* Arena::CreateMaybeMessage<::embkv::VoteRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace embkv {

// ===================================================================

class PersistentState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.PersistentState) */ {
 public:
  inline PersistentState() : PersistentState(nullptr) {}
  ~PersistentState() override;
  explicit PROTOBUF_CONSTEXPR PersistentState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PersistentState(const PersistentState& from);
  PersistentState(PersistentState&& from) noexcept
    : PersistentState() {
    *this = ::std::move(from);
  }

  inline PersistentState& operator=(const PersistentState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistentState& operator=(PersistentState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersistentState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersistentState* internal_default_instance() {
    return reinterpret_cast<const PersistentState*>(
               &_PersistentState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PersistentState& a, PersistentState& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistentState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersistentState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersistentState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersistentState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PersistentState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PersistentState& from) {
    PersistentState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistentState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.PersistentState";
  }
  protected:
  explicit PersistentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentTermFieldNumber = 1,
    kVotedForFieldNumber = 2,
    kLastAppliedFieldNumber = 3,
  };
  // uint64 current_term = 1;
  void clear_current_term();
  uint64_t current_term() const;
  void set_current_term(uint64_t value);
  private:
  uint64_t _internal_current_term() const;
  void _internal_set_current_term(uint64_t value);
  public:

  // optional uint64 voted_for = 2;
  bool has_voted_for() const;
  private:
  bool _internal_has_voted_for() const;
  public:
  void clear_voted_for();
  uint64_t voted_for() const;
  void set_voted_for(uint64_t value);
  private:
  uint64_t _internal_voted_for() const;
  void _internal_set_voted_for(uint64_t value);
  public:

  // uint64 last_applied = 3;
  void clear_last_applied();
  uint64_t last_applied() const;
  void set_last_applied(uint64_t value);
  private:
  uint64_t _internal_last_applied() const;
  void _internal_set_last_applied(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:embkv.PersistentState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t current_term_;
    uint64_t voted_for_;
    uint64_t last_applied_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum ContentCase {
    kVoteRequest = 3,
    kVoteReply = 4,
    kAppendEntriesRequest = 5,
    kAppendEntriesReply = 6,
    kSnapshotRequest = 7,
    kSnapshotReply = 8,
    kClientRequest = 9,
    kClientReply = 10,
    CONTENT_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kVoteRequestFieldNumber = 3,
    kVoteReplyFieldNumber = 4,
    kAppendEntriesRequestFieldNumber = 5,
    kAppendEntriesReplyFieldNumber = 6,
    kSnapshotRequestFieldNumber = 7,
    kSnapshotReplyFieldNumber = 8,
    kClientRequestFieldNumber = 9,
    kClientReplyFieldNumber = 10,
  };
  // uint64 node_id = 1;
  void clear_node_id();
  uint64_t node_id() const;
  void set_node_id(uint64_t value);
  private:
  uint64_t _internal_node_id() const;
  void _internal_set_node_id(uint64_t value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // .embkv.VoteRequest vote_request = 3;
  bool has_vote_request() const;
  private:
  bool _internal_has_vote_request() const;
  public:
  void clear_vote_request();
  const ::embkv::VoteRequest& vote_request() const;
  PROTOBUF_NODISCARD ::embkv::VoteRequest* release_vote_request();
  ::embkv::VoteRequest* mutable_vote_request();
  void set_allocated_vote_request(::embkv::VoteRequest* vote_request);
  private:
  const ::embkv::VoteRequest& _internal_vote_request() const;
  ::embkv::VoteRequest* _internal_mutable_vote_request();
  public:
  void unsafe_arena_set_allocated_vote_request(
      ::embkv::VoteRequest* vote_request);
  ::embkv::VoteRequest* unsafe_arena_release_vote_request();

  // .embkv.VoteReply vote_reply = 4;
  bool has_vote_reply() const;
  private:
  bool _internal_has_vote_reply() const;
  public:
  void clear_vote_reply();
  const ::embkv::VoteReply& vote_reply() const;
  PROTOBUF_NODISCARD ::embkv::VoteReply* release_vote_reply();
  ::embkv::VoteReply* mutable_vote_reply();
  void set_allocated_vote_reply(::embkv::VoteReply* vote_reply);
  private:
  const ::embkv::VoteReply& _internal_vote_reply() const;
  ::embkv::VoteReply* _internal_mutable_vote_reply();
  public:
  void unsafe_arena_set_allocated_vote_reply(
      ::embkv::VoteReply* vote_reply);
  ::embkv::VoteReply* unsafe_arena_release_vote_reply();

  // .embkv.AppendEntriesRequest append_entries_request = 5;
  bool has_append_entries_request() const;
  private:
  bool _internal_has_append_entries_request() const;
  public:
  void clear_append_entries_request();
  const ::embkv::AppendEntriesRequest& append_entries_request() const;
  PROTOBUF_NODISCARD ::embkv::AppendEntriesRequest* release_append_entries_request();
  ::embkv::AppendEntriesRequest* mutable_append_entries_request();
  void set_allocated_append_entries_request(::embkv::AppendEntriesRequest* append_entries_request);
  private:
  const ::embkv::AppendEntriesRequest& _internal_append_entries_request() const;
  ::embkv::AppendEntriesRequest* _internal_mutable_append_entries_request();
  public:
  void unsafe_arena_set_allocated_append_entries_request(
      ::embkv::AppendEntriesRequest* append_entries_request);
  ::embkv::AppendEntriesRequest* unsafe_arena_release_append_entries_request();

  // .embkv.AppendEntriesReply append_entries_reply = 6;
  bool has_append_entries_reply() const;
  private:
  bool _internal_has_append_entries_reply() const;
  public:
  void clear_append_entries_reply();
  const ::embkv::AppendEntriesReply& append_entries_reply() const;
  PROTOBUF_NODISCARD ::embkv::AppendEntriesReply* release_append_entries_reply();
  ::embkv::AppendEntriesReply* mutable_append_entries_reply();
  void set_allocated_append_entries_reply(::embkv::AppendEntriesReply* append_entries_reply);
  private:
  const ::embkv::AppendEntriesReply& _internal_append_entries_reply() const;
  ::embkv::AppendEntriesReply* _internal_mutable_append_entries_reply();
  public:
  void unsafe_arena_set_allocated_append_entries_reply(
      ::embkv::AppendEntriesReply* append_entries_reply);
  ::embkv::AppendEntriesReply* unsafe_arena_release_append_entries_reply();

  // .embkv.InstallSnapshotRequest snapshot_request = 7;
  bool has_snapshot_request() const;
  private:
  bool _internal_has_snapshot_request() const;
  public:
  void clear_snapshot_request();
  const ::embkv::InstallSnapshotRequest& snapshot_request() const;
  PROTOBUF_NODISCARD ::embkv::InstallSnapshotRequest* release_snapshot_request();
  ::embkv::InstallSnapshotRequest* mutable_snapshot_request();
  void set_allocated_snapshot_request(::embkv::InstallSnapshotRequest* snapshot_request);
  private:
  const ::embkv::InstallSnapshotRequest& _internal_snapshot_request() const;
  ::embkv::InstallSnapshotRequest* _internal_mutable_snapshot_request();
  public:
  void unsafe_arena_set_allocated_snapshot_request(
      ::embkv::InstallSnapshotRequest* snapshot_request);
  ::embkv::InstallSnapshotRequest* unsafe_arena_release_snapshot_request();

  // .embkv.InstallSnapshotReply snapshot_reply = 8;
  bool has_snapshot_reply() const;
  private:
  bool _internal_has_snapshot_reply() const;
  public:
  void clear_snapshot_reply();
  const ::embkv::InstallSnapshotReply& snapshot_reply() const;
  PROTOBUF_NODISCARD ::embkv::InstallSnapshotReply* release_snapshot_reply();
  ::embkv::InstallSnapshotReply* mutable_snapshot_reply();
  void set_allocated_snapshot_reply(::embkv::InstallSnapshotReply* snapshot_reply);
  private:
  const ::embkv::InstallSnapshotReply& _internal_snapshot_reply() const;
  ::embkv::InstallSnapshotReply* _internal_mutable_snapshot_reply();
  public:
  void unsafe_arena_set_allocated_snapshot_reply(
      ::embkv::InstallSnapshotReply* snapshot_reply);
  ::embkv::InstallSnapshotReply* unsafe_arena_release_snapshot_reply();

  // .embkv.ClientRequest client_request = 9;
  bool has_client_request() const;
  private:
  bool _internal_has_client_request() const;
  public:
  void clear_client_request();
  const ::embkv::ClientRequest& client_request() const;
  PROTOBUF_NODISCARD ::embkv::ClientRequest* release_client_request();
  ::embkv::ClientRequest* mutable_client_request();
  void set_allocated_client_request(::embkv::ClientRequest* client_request);
  private:
  const ::embkv::ClientRequest& _internal_client_request() const;
  ::embkv::ClientRequest* _internal_mutable_client_request();
  public:
  void unsafe_arena_set_allocated_client_request(
      ::embkv::ClientRequest* client_request);
  ::embkv::ClientRequest* unsafe_arena_release_client_request();

  // .embkv.ClientReply client_reply = 10;
  bool has_client_reply() const;
  private:
  bool _internal_has_client_reply() const;
  public:
  void clear_client_reply();
  const ::embkv::ClientReply& client_reply() const;
  PROTOBUF_NODISCARD ::embkv::ClientReply* release_client_reply();
  ::embkv::ClientReply* mutable_client_reply();
  void set_allocated_client_reply(::embkv::ClientReply* client_reply);
  private:
  const ::embkv::ClientReply& _internal_client_reply() const;
  ::embkv::ClientReply* _internal_mutable_client_reply();
  public:
  void unsafe_arena_set_allocated_client_reply(
      ::embkv::ClientReply* client_reply);
  ::embkv::ClientReply* unsafe_arena_release_client_reply();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:embkv.Message)
 private:
  class _Internal;
  void set_has_vote_request();
  void set_has_vote_reply();
  void set_has_append_entries_request();
  void set_has_append_entries_reply();
  void set_has_snapshot_request();
  void set_has_snapshot_reply();
  void set_has_client_request();
  void set_has_client_reply();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t node_id_;
    uint64_t timestamp_;
    union ContentUnion {
      constexpr ContentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::embkv::VoteRequest* vote_request_;
      ::embkv::VoteReply* vote_reply_;
      ::embkv::AppendEntriesRequest* append_entries_request_;
      ::embkv::AppendEntriesReply* append_entries_reply_;
      ::embkv::InstallSnapshotRequest* snapshot_request_;
      ::embkv::InstallSnapshotReply* snapshot_reply_;
      ::embkv::ClientRequest* client_request_;
      ::embkv::ClientReply* client_reply_;
    } content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LogEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  ~LogEntry() override;
  explicit PROTOBUF_CONSTEXPR LogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogEntry& from) {
    LogEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientRequestFieldNumber = 3,
    kTermFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // bytes client_request = 3;
  void clear_client_request();
  const std::string& client_request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_request();
  PROTOBUF_NODISCARD std::string* release_client_request();
  void set_allocated_client_request(std::string* client_request);
  private:
  const std::string& _internal_client_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_request(const std::string& value);
  std::string* _internal_mutable_client_request();
  public:

  // uint64 term = 1;
  void clear_term();
  uint64_t term() const;
  void set_term(uint64_t value);
  private:
  uint64_t _internal_term() const;
  void _internal_set_term(uint64_t value);
  public:

  // uint64 index = 2;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:embkv.LogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_request_;
    uint64_t term_;
    uint64_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class VoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.VoteRequest) */ {
 public:
  inline VoteRequest() : VoteRequest(nullptr) {}
  ~VoteRequest() override;
  explicit PROTOBUF_CONSTEXPR VoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoteRequest(const VoteRequest& from);
  VoteRequest(VoteRequest&& from) noexcept
    : VoteRequest() {
    *this = ::std::move(from);
  }

  inline VoteRequest& operator=(const VoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteRequest& operator=(VoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteRequest* internal_default_instance() {
    return reinterpret_cast<const VoteRequest*>(
               &_VoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VoteRequest& a, VoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoteRequest& from) {
    VoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.VoteRequest";
  }
  protected:
  explicit VoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kLastLogIndexFieldNumber = 2,
    kLastLogTermFieldNumber = 3,
  };
  // uint64 term = 1;
  void clear_term();
  uint64_t term() const;
  void set_term(uint64_t value);
  private:
  uint64_t _internal_term() const;
  void _internal_set_term(uint64_t value);
  public:

  // uint64 last_log_index = 2;
  void clear_last_log_index();
  uint64_t last_log_index() const;
  void set_last_log_index(uint64_t value);
  private:
  uint64_t _internal_last_log_index() const;
  void _internal_set_last_log_index(uint64_t value);
  public:

  // uint64 last_log_term = 3;
  void clear_last_log_term();
  uint64_t last_log_term() const;
  void set_last_log_term(uint64_t value);
  private:
  uint64_t _internal_last_log_term() const;
  void _internal_set_last_log_term(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:embkv.VoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t term_;
    uint64_t last_log_index_;
    uint64_t last_log_term_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class VoteReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.VoteReply) */ {
 public:
  inline VoteReply() : VoteReply(nullptr) {}
  ~VoteReply() override;
  explicit PROTOBUF_CONSTEXPR VoteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoteReply(const VoteReply& from);
  VoteReply(VoteReply&& from) noexcept
    : VoteReply() {
    *this = ::std::move(from);
  }

  inline VoteReply& operator=(const VoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteReply& operator=(VoteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteReply* internal_default_instance() {
    return reinterpret_cast<const VoteReply*>(
               &_VoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VoteReply& a, VoteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VoteReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VoteReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VoteReply& from) {
    VoteReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.VoteReply";
  }
  protected:
  explicit VoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kGrantedFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term();
  uint64_t term() const;
  void set_term(uint64_t value);
  private:
  uint64_t _internal_term() const;
  void _internal_set_term(uint64_t value);
  public:

  // bool granted = 2;
  void clear_granted();
  bool granted() const;
  void set_granted(bool value);
  private:
  bool _internal_granted() const;
  void _internal_set_granted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:embkv.VoteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t term_;
    bool granted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.AppendEntriesRequest) */ {
 public:
  inline AppendEntriesRequest() : AppendEntriesRequest(nullptr) {}
  ~AppendEntriesRequest() override;
  explicit PROTOBUF_CONSTEXPR AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesRequest(const AppendEntriesRequest& from);
  AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
    : AppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
               &_AppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendEntriesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendEntriesRequest& from) {
    AppendEntriesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.AppendEntriesRequest";
  }
  protected:
  explicit AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 4,
    kTermFieldNumber = 1,
    kPrevLogIndexFieldNumber = 2,
    kPrevLogTermFieldNumber = 3,
    kLeaderCommitFieldNumber = 5,
    kIsHeartbeatFieldNumber = 6,
  };
  // repeated .embkv.LogEntry entries = 4;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::embkv::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::embkv::LogEntry >*
      mutable_entries();
  private:
  const ::embkv::LogEntry& _internal_entries(int index) const;
  ::embkv::LogEntry* _internal_add_entries();
  public:
  const ::embkv::LogEntry& entries(int index) const;
  ::embkv::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::embkv::LogEntry >&
      entries() const;

  // uint64 term = 1;
  void clear_term();
  uint64_t term() const;
  void set_term(uint64_t value);
  private:
  uint64_t _internal_term() const;
  void _internal_set_term(uint64_t value);
  public:

  // uint64 prev_log_index = 2;
  void clear_prev_log_index();
  uint64_t prev_log_index() const;
  void set_prev_log_index(uint64_t value);
  private:
  uint64_t _internal_prev_log_index() const;
  void _internal_set_prev_log_index(uint64_t value);
  public:

  // uint64 prev_log_term = 3;
  void clear_prev_log_term();
  uint64_t prev_log_term() const;
  void set_prev_log_term(uint64_t value);
  private:
  uint64_t _internal_prev_log_term() const;
  void _internal_set_prev_log_term(uint64_t value);
  public:

  // uint64 leader_commit = 5;
  void clear_leader_commit();
  uint64_t leader_commit() const;
  void set_leader_commit(uint64_t value);
  private:
  uint64_t _internal_leader_commit() const;
  void _internal_set_leader_commit(uint64_t value);
  public:

  // bool is_heartbeat = 6;
  void clear_is_heartbeat();
  bool is_heartbeat() const;
  void set_is_heartbeat(bool value);
  private:
  bool _internal_is_heartbeat() const;
  void _internal_set_is_heartbeat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:embkv.AppendEntriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::embkv::LogEntry > entries_;
    uint64_t term_;
    uint64_t prev_log_index_;
    uint64_t prev_log_term_;
    uint64_t leader_commit_;
    bool is_heartbeat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.AppendEntriesReply) */ {
 public:
  inline AppendEntriesReply() : AppendEntriesReply(nullptr) {}
  ~AppendEntriesReply() override;
  explicit PROTOBUF_CONSTEXPR AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesReply(const AppendEntriesReply& from);
  AppendEntriesReply(AppendEntriesReply&& from) noexcept
    : AppendEntriesReply() {
    *this = ::std::move(from);
  }

  inline AppendEntriesReply& operator=(const AppendEntriesReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesReply& operator=(AppendEntriesReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesReply* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesReply*>(
               &_AppendEntriesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AppendEntriesReply& a, AppendEntriesReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendEntriesReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendEntriesReply& from) {
    AppendEntriesReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.AppendEntriesReply";
  }
  protected:
  explicit AppendEntriesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kConflictIndexFieldNumber = 3,
    kLastLogIndexFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term();
  uint64_t term() const;
  void set_term(uint64_t value);
  private:
  uint64_t _internal_term() const;
  void _internal_set_term(uint64_t value);
  public:

  // uint64 conflict_index = 3;
  void clear_conflict_index();
  uint64_t conflict_index() const;
  void set_conflict_index(uint64_t value);
  private:
  uint64_t _internal_conflict_index() const;
  void _internal_set_conflict_index(uint64_t value);
  public:

  // uint64 last_log_index = 4;
  void clear_last_log_index();
  uint64_t last_log_index() const;
  void set_last_log_index(uint64_t value);
  private:
  uint64_t _internal_last_log_index() const;
  void _internal_set_last_log_index(uint64_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:embkv.AppendEntriesReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t term_;
    uint64_t conflict_index_;
    uint64_t last_log_index_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.InstallSnapshotRequest) */ {
 public:
  inline InstallSnapshotRequest() : InstallSnapshotRequest(nullptr) {}
  ~InstallSnapshotRequest() override;
  explicit PROTOBUF_CONSTEXPR InstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstallSnapshotRequest(const InstallSnapshotRequest& from);
  InstallSnapshotRequest(InstallSnapshotRequest&& from) noexcept
    : InstallSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotRequest& operator=(const InstallSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotRequest& operator=(InstallSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstallSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstallSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotRequest*>(
               &_InstallSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InstallSnapshotRequest& a, InstallSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapshotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstallSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstallSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstallSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstallSnapshotRequest& from) {
    InstallSnapshotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.InstallSnapshotRequest";
  }
  protected:
  explicit InstallSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotDataFieldNumber = 3,
    kTermFieldNumber = 1,
    kSnapshotIndexFieldNumber = 2,
  };
  // bytes snapshot_data = 3;
  void clear_snapshot_data();
  const std::string& snapshot_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snapshot_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snapshot_data();
  PROTOBUF_NODISCARD std::string* release_snapshot_data();
  void set_allocated_snapshot_data(std::string* snapshot_data);
  private:
  const std::string& _internal_snapshot_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot_data(const std::string& value);
  std::string* _internal_mutable_snapshot_data();
  public:

  // uint64 term = 1;
  void clear_term();
  uint64_t term() const;
  void set_term(uint64_t value);
  private:
  uint64_t _internal_term() const;
  void _internal_set_term(uint64_t value);
  public:

  // uint64 snapshot_index = 2;
  void clear_snapshot_index();
  uint64_t snapshot_index() const;
  void set_snapshot_index(uint64_t value);
  private:
  uint64_t _internal_snapshot_index() const;
  void _internal_set_snapshot_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:embkv.InstallSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_data_;
    uint64_t term_;
    uint64_t snapshot_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.InstallSnapshotReply) */ {
 public:
  inline InstallSnapshotReply() : InstallSnapshotReply(nullptr) {}
  ~InstallSnapshotReply() override;
  explicit PROTOBUF_CONSTEXPR InstallSnapshotReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstallSnapshotReply(const InstallSnapshotReply& from);
  InstallSnapshotReply(InstallSnapshotReply&& from) noexcept
    : InstallSnapshotReply() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotReply& operator=(const InstallSnapshotReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotReply& operator=(InstallSnapshotReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstallSnapshotReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstallSnapshotReply* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotReply*>(
               &_InstallSnapshotReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InstallSnapshotReply& a, InstallSnapshotReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapshotReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallSnapshotReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstallSnapshotReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InstallSnapshotReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InstallSnapshotReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InstallSnapshotReply& from) {
    InstallSnapshotReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.InstallSnapshotReply";
  }
  protected:
  explicit InstallSnapshotReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:embkv.InstallSnapshotReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.ClientRequest) */ {
 public:
  inline ClientRequest() : ClientRequest(nullptr) {}
  ~ClientRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientRequest(const ClientRequest& from);
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientRequest& from) {
    ClientRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.ClientRequest";
  }
  protected:
  explicit ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // bytes command = 2;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // uint64 request_id = 1;
  void clear_request_id();
  uint64_t request_id() const;
  void set_request_id(uint64_t value);
  private:
  uint64_t _internal_request_id() const;
  void _internal_set_request_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:embkv.ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    uint64_t request_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ClientReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:embkv.ClientReply) */ {
 public:
  inline ClientReply() : ClientReply(nullptr) {}
  ~ClientReply() override;
  explicit PROTOBUF_CONSTEXPR ClientReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientReply(const ClientReply& from);
  ClientReply(ClientReply&& from) noexcept
    : ClientReply() {
    *this = ::std::move(from);
  }

  inline ClientReply& operator=(const ClientReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientReply& operator=(ClientReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientReply* internal_default_instance() {
    return reinterpret_cast<const ClientReply*>(
               &_ClientReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ClientReply& a, ClientReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientReply& from) {
    ClientReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "embkv.ClientReply";
  }
  protected:
  explicit ClientReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kLeaderHintFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // bytes result = 4;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // uint64 request_id = 1;
  void clear_request_id();
  uint64_t request_id() const;
  void set_request_id(uint64_t value);
  private:
  uint64_t _internal_request_id() const;
  void _internal_set_request_id(uint64_t value);
  public:

  // uint64 leader_hint = 2;
  void clear_leader_hint();
  uint64_t leader_hint() const;
  void set_leader_hint(uint64_t value);
  private:
  uint64_t _internal_leader_hint() const;
  void _internal_set_leader_hint(uint64_t value);
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:embkv.ClientReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    uint64_t request_id_;
    uint64_t leader_hint_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PersistentState

// uint64 current_term = 1;
inline void PersistentState::clear_current_term() {
  _impl_.current_term_ = uint64_t{0u};
}
inline uint64_t PersistentState::_internal_current_term() const {
  return _impl_.current_term_;
}
inline uint64_t PersistentState::current_term() const {
  // @@protoc_insertion_point(field_get:embkv.PersistentState.current_term)
  return _internal_current_term();
}
inline void PersistentState::_internal_set_current_term(uint64_t value) {
  
  _impl_.current_term_ = value;
}
inline void PersistentState::set_current_term(uint64_t value) {
  _internal_set_current_term(value);
  // @@protoc_insertion_point(field_set:embkv.PersistentState.current_term)
}

// optional uint64 voted_for = 2;
inline bool PersistentState::_internal_has_voted_for() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PersistentState::has_voted_for() const {
  return _internal_has_voted_for();
}
inline void PersistentState::clear_voted_for() {
  _impl_.voted_for_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t PersistentState::_internal_voted_for() const {
  return _impl_.voted_for_;
}
inline uint64_t PersistentState::voted_for() const {
  // @@protoc_insertion_point(field_get:embkv.PersistentState.voted_for)
  return _internal_voted_for();
}
inline void PersistentState::_internal_set_voted_for(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.voted_for_ = value;
}
inline void PersistentState::set_voted_for(uint64_t value) {
  _internal_set_voted_for(value);
  // @@protoc_insertion_point(field_set:embkv.PersistentState.voted_for)
}

// uint64 last_applied = 3;
inline void PersistentState::clear_last_applied() {
  _impl_.last_applied_ = uint64_t{0u};
}
inline uint64_t PersistentState::_internal_last_applied() const {
  return _impl_.last_applied_;
}
inline uint64_t PersistentState::last_applied() const {
  // @@protoc_insertion_point(field_get:embkv.PersistentState.last_applied)
  return _internal_last_applied();
}
inline void PersistentState::_internal_set_last_applied(uint64_t value) {
  
  _impl_.last_applied_ = value;
}
inline void PersistentState::set_last_applied(uint64_t value) {
  _internal_set_last_applied(value);
  // @@protoc_insertion_point(field_set:embkv.PersistentState.last_applied)
}

// -------------------------------------------------------------------

// Message

// uint64 node_id = 1;
inline void Message::clear_node_id() {
  _impl_.node_id_ = uint64_t{0u};
}
inline uint64_t Message::_internal_node_id() const {
  return _impl_.node_id_;
}
inline uint64_t Message::node_id() const {
  // @@protoc_insertion_point(field_get:embkv.Message.node_id)
  return _internal_node_id();
}
inline void Message::_internal_set_node_id(uint64_t value) {
  
  _impl_.node_id_ = value;
}
inline void Message::set_node_id(uint64_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:embkv.Message.node_id)
}

// uint64 timestamp = 2;
inline void Message::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t Message::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t Message::timestamp() const {
  // @@protoc_insertion_point(field_get:embkv.Message.timestamp)
  return _internal_timestamp();
}
inline void Message::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void Message::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:embkv.Message.timestamp)
}

// .embkv.VoteRequest vote_request = 3;
inline bool Message::_internal_has_vote_request() const {
  return content_case() == kVoteRequest;
}
inline bool Message::has_vote_request() const {
  return _internal_has_vote_request();
}
inline void Message::set_has_vote_request() {
  _impl_._oneof_case_[0] = kVoteRequest;
}
inline void Message::clear_vote_request() {
  if (_internal_has_vote_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.vote_request_;
    }
    clear_has_content();
  }
}
inline ::embkv::VoteRequest* Message::release_vote_request() {
  // @@protoc_insertion_point(field_release:embkv.Message.vote_request)
  if (_internal_has_vote_request()) {
    clear_has_content();
    ::embkv::VoteRequest* temp = _impl_.content_.vote_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.vote_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::embkv::VoteRequest& Message::_internal_vote_request() const {
  return _internal_has_vote_request()
      ? *_impl_.content_.vote_request_
      : reinterpret_cast< ::embkv::VoteRequest&>(::embkv::_VoteRequest_default_instance_);
}
inline const ::embkv::VoteRequest& Message::vote_request() const {
  // @@protoc_insertion_point(field_get:embkv.Message.vote_request)
  return _internal_vote_request();
}
inline ::embkv::VoteRequest* Message::unsafe_arena_release_vote_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:embkv.Message.vote_request)
  if (_internal_has_vote_request()) {
    clear_has_content();
    ::embkv::VoteRequest* temp = _impl_.content_.vote_request_;
    _impl_.content_.vote_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_vote_request(::embkv::VoteRequest* vote_request) {
  clear_content();
  if (vote_request) {
    set_has_vote_request();
    _impl_.content_.vote_request_ = vote_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:embkv.Message.vote_request)
}
inline ::embkv::VoteRequest* Message::_internal_mutable_vote_request() {
  if (!_internal_has_vote_request()) {
    clear_content();
    set_has_vote_request();
    _impl_.content_.vote_request_ = CreateMaybeMessage< ::embkv::VoteRequest >(GetArenaForAllocation());
  }
  return _impl_.content_.vote_request_;
}
inline ::embkv::VoteRequest* Message::mutable_vote_request() {
  ::embkv::VoteRequest* _msg = _internal_mutable_vote_request();
  // @@protoc_insertion_point(field_mutable:embkv.Message.vote_request)
  return _msg;
}

// .embkv.VoteReply vote_reply = 4;
inline bool Message::_internal_has_vote_reply() const {
  return content_case() == kVoteReply;
}
inline bool Message::has_vote_reply() const {
  return _internal_has_vote_reply();
}
inline void Message::set_has_vote_reply() {
  _impl_._oneof_case_[0] = kVoteReply;
}
inline void Message::clear_vote_reply() {
  if (_internal_has_vote_reply()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.vote_reply_;
    }
    clear_has_content();
  }
}
inline ::embkv::VoteReply* Message::release_vote_reply() {
  // @@protoc_insertion_point(field_release:embkv.Message.vote_reply)
  if (_internal_has_vote_reply()) {
    clear_has_content();
    ::embkv::VoteReply* temp = _impl_.content_.vote_reply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.vote_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::embkv::VoteReply& Message::_internal_vote_reply() const {
  return _internal_has_vote_reply()
      ? *_impl_.content_.vote_reply_
      : reinterpret_cast< ::embkv::VoteReply&>(::embkv::_VoteReply_default_instance_);
}
inline const ::embkv::VoteReply& Message::vote_reply() const {
  // @@protoc_insertion_point(field_get:embkv.Message.vote_reply)
  return _internal_vote_reply();
}
inline ::embkv::VoteReply* Message::unsafe_arena_release_vote_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:embkv.Message.vote_reply)
  if (_internal_has_vote_reply()) {
    clear_has_content();
    ::embkv::VoteReply* temp = _impl_.content_.vote_reply_;
    _impl_.content_.vote_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_vote_reply(::embkv::VoteReply* vote_reply) {
  clear_content();
  if (vote_reply) {
    set_has_vote_reply();
    _impl_.content_.vote_reply_ = vote_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:embkv.Message.vote_reply)
}
inline ::embkv::VoteReply* Message::_internal_mutable_vote_reply() {
  if (!_internal_has_vote_reply()) {
    clear_content();
    set_has_vote_reply();
    _impl_.content_.vote_reply_ = CreateMaybeMessage< ::embkv::VoteReply >(GetArenaForAllocation());
  }
  return _impl_.content_.vote_reply_;
}
inline ::embkv::VoteReply* Message::mutable_vote_reply() {
  ::embkv::VoteReply* _msg = _internal_mutable_vote_reply();
  // @@protoc_insertion_point(field_mutable:embkv.Message.vote_reply)
  return _msg;
}

// .embkv.AppendEntriesRequest append_entries_request = 5;
inline bool Message::_internal_has_append_entries_request() const {
  return content_case() == kAppendEntriesRequest;
}
inline bool Message::has_append_entries_request() const {
  return _internal_has_append_entries_request();
}
inline void Message::set_has_append_entries_request() {
  _impl_._oneof_case_[0] = kAppendEntriesRequest;
}
inline void Message::clear_append_entries_request() {
  if (_internal_has_append_entries_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.append_entries_request_;
    }
    clear_has_content();
  }
}
inline ::embkv::AppendEntriesRequest* Message::release_append_entries_request() {
  // @@protoc_insertion_point(field_release:embkv.Message.append_entries_request)
  if (_internal_has_append_entries_request()) {
    clear_has_content();
    ::embkv::AppendEntriesRequest* temp = _impl_.content_.append_entries_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.append_entries_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::embkv::AppendEntriesRequest& Message::_internal_append_entries_request() const {
  return _internal_has_append_entries_request()
      ? *_impl_.content_.append_entries_request_
      : reinterpret_cast< ::embkv::AppendEntriesRequest&>(::embkv::_AppendEntriesRequest_default_instance_);
}
inline const ::embkv::AppendEntriesRequest& Message::append_entries_request() const {
  // @@protoc_insertion_point(field_get:embkv.Message.append_entries_request)
  return _internal_append_entries_request();
}
inline ::embkv::AppendEntriesRequest* Message::unsafe_arena_release_append_entries_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:embkv.Message.append_entries_request)
  if (_internal_has_append_entries_request()) {
    clear_has_content();
    ::embkv::AppendEntriesRequest* temp = _impl_.content_.append_entries_request_;
    _impl_.content_.append_entries_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_append_entries_request(::embkv::AppendEntriesRequest* append_entries_request) {
  clear_content();
  if (append_entries_request) {
    set_has_append_entries_request();
    _impl_.content_.append_entries_request_ = append_entries_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:embkv.Message.append_entries_request)
}
inline ::embkv::AppendEntriesRequest* Message::_internal_mutable_append_entries_request() {
  if (!_internal_has_append_entries_request()) {
    clear_content();
    set_has_append_entries_request();
    _impl_.content_.append_entries_request_ = CreateMaybeMessage< ::embkv::AppendEntriesRequest >(GetArenaForAllocation());
  }
  return _impl_.content_.append_entries_request_;
}
inline ::embkv::AppendEntriesRequest* Message::mutable_append_entries_request() {
  ::embkv::AppendEntriesRequest* _msg = _internal_mutable_append_entries_request();
  // @@protoc_insertion_point(field_mutable:embkv.Message.append_entries_request)
  return _msg;
}

// .embkv.AppendEntriesReply append_entries_reply = 6;
inline bool Message::_internal_has_append_entries_reply() const {
  return content_case() == kAppendEntriesReply;
}
inline bool Message::has_append_entries_reply() const {
  return _internal_has_append_entries_reply();
}
inline void Message::set_has_append_entries_reply() {
  _impl_._oneof_case_[0] = kAppendEntriesReply;
}
inline void Message::clear_append_entries_reply() {
  if (_internal_has_append_entries_reply()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.append_entries_reply_;
    }
    clear_has_content();
  }
}
inline ::embkv::AppendEntriesReply* Message::release_append_entries_reply() {
  // @@protoc_insertion_point(field_release:embkv.Message.append_entries_reply)
  if (_internal_has_append_entries_reply()) {
    clear_has_content();
    ::embkv::AppendEntriesReply* temp = _impl_.content_.append_entries_reply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.append_entries_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::embkv::AppendEntriesReply& Message::_internal_append_entries_reply() const {
  return _internal_has_append_entries_reply()
      ? *_impl_.content_.append_entries_reply_
      : reinterpret_cast< ::embkv::AppendEntriesReply&>(::embkv::_AppendEntriesReply_default_instance_);
}
inline const ::embkv::AppendEntriesReply& Message::append_entries_reply() const {
  // @@protoc_insertion_point(field_get:embkv.Message.append_entries_reply)
  return _internal_append_entries_reply();
}
inline ::embkv::AppendEntriesReply* Message::unsafe_arena_release_append_entries_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:embkv.Message.append_entries_reply)
  if (_internal_has_append_entries_reply()) {
    clear_has_content();
    ::embkv::AppendEntriesReply* temp = _impl_.content_.append_entries_reply_;
    _impl_.content_.append_entries_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_append_entries_reply(::embkv::AppendEntriesReply* append_entries_reply) {
  clear_content();
  if (append_entries_reply) {
    set_has_append_entries_reply();
    _impl_.content_.append_entries_reply_ = append_entries_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:embkv.Message.append_entries_reply)
}
inline ::embkv::AppendEntriesReply* Message::_internal_mutable_append_entries_reply() {
  if (!_internal_has_append_entries_reply()) {
    clear_content();
    set_has_append_entries_reply();
    _impl_.content_.append_entries_reply_ = CreateMaybeMessage< ::embkv::AppendEntriesReply >(GetArenaForAllocation());
  }
  return _impl_.content_.append_entries_reply_;
}
inline ::embkv::AppendEntriesReply* Message::mutable_append_entries_reply() {
  ::embkv::AppendEntriesReply* _msg = _internal_mutable_append_entries_reply();
  // @@protoc_insertion_point(field_mutable:embkv.Message.append_entries_reply)
  return _msg;
}

// .embkv.InstallSnapshotRequest snapshot_request = 7;
inline bool Message::_internal_has_snapshot_request() const {
  return content_case() == kSnapshotRequest;
}
inline bool Message::has_snapshot_request() const {
  return _internal_has_snapshot_request();
}
inline void Message::set_has_snapshot_request() {
  _impl_._oneof_case_[0] = kSnapshotRequest;
}
inline void Message::clear_snapshot_request() {
  if (_internal_has_snapshot_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.snapshot_request_;
    }
    clear_has_content();
  }
}
inline ::embkv::InstallSnapshotRequest* Message::release_snapshot_request() {
  // @@protoc_insertion_point(field_release:embkv.Message.snapshot_request)
  if (_internal_has_snapshot_request()) {
    clear_has_content();
    ::embkv::InstallSnapshotRequest* temp = _impl_.content_.snapshot_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.snapshot_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::embkv::InstallSnapshotRequest& Message::_internal_snapshot_request() const {
  return _internal_has_snapshot_request()
      ? *_impl_.content_.snapshot_request_
      : reinterpret_cast< ::embkv::InstallSnapshotRequest&>(::embkv::_InstallSnapshotRequest_default_instance_);
}
inline const ::embkv::InstallSnapshotRequest& Message::snapshot_request() const {
  // @@protoc_insertion_point(field_get:embkv.Message.snapshot_request)
  return _internal_snapshot_request();
}
inline ::embkv::InstallSnapshotRequest* Message::unsafe_arena_release_snapshot_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:embkv.Message.snapshot_request)
  if (_internal_has_snapshot_request()) {
    clear_has_content();
    ::embkv::InstallSnapshotRequest* temp = _impl_.content_.snapshot_request_;
    _impl_.content_.snapshot_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_snapshot_request(::embkv::InstallSnapshotRequest* snapshot_request) {
  clear_content();
  if (snapshot_request) {
    set_has_snapshot_request();
    _impl_.content_.snapshot_request_ = snapshot_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:embkv.Message.snapshot_request)
}
inline ::embkv::InstallSnapshotRequest* Message::_internal_mutable_snapshot_request() {
  if (!_internal_has_snapshot_request()) {
    clear_content();
    set_has_snapshot_request();
    _impl_.content_.snapshot_request_ = CreateMaybeMessage< ::embkv::InstallSnapshotRequest >(GetArenaForAllocation());
  }
  return _impl_.content_.snapshot_request_;
}
inline ::embkv::InstallSnapshotRequest* Message::mutable_snapshot_request() {
  ::embkv::InstallSnapshotRequest* _msg = _internal_mutable_snapshot_request();
  // @@protoc_insertion_point(field_mutable:embkv.Message.snapshot_request)
  return _msg;
}

// .embkv.InstallSnapshotReply snapshot_reply = 8;
inline bool Message::_internal_has_snapshot_reply() const {
  return content_case() == kSnapshotReply;
}
inline bool Message::has_snapshot_reply() const {
  return _internal_has_snapshot_reply();
}
inline void Message::set_has_snapshot_reply() {
  _impl_._oneof_case_[0] = kSnapshotReply;
}
inline void Message::clear_snapshot_reply() {
  if (_internal_has_snapshot_reply()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.snapshot_reply_;
    }
    clear_has_content();
  }
}
inline ::embkv::InstallSnapshotReply* Message::release_snapshot_reply() {
  // @@protoc_insertion_point(field_release:embkv.Message.snapshot_reply)
  if (_internal_has_snapshot_reply()) {
    clear_has_content();
    ::embkv::InstallSnapshotReply* temp = _impl_.content_.snapshot_reply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.snapshot_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::embkv::InstallSnapshotReply& Message::_internal_snapshot_reply() const {
  return _internal_has_snapshot_reply()
      ? *_impl_.content_.snapshot_reply_
      : reinterpret_cast< ::embkv::InstallSnapshotReply&>(::embkv::_InstallSnapshotReply_default_instance_);
}
inline const ::embkv::InstallSnapshotReply& Message::snapshot_reply() const {
  // @@protoc_insertion_point(field_get:embkv.Message.snapshot_reply)
  return _internal_snapshot_reply();
}
inline ::embkv::InstallSnapshotReply* Message::unsafe_arena_release_snapshot_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:embkv.Message.snapshot_reply)
  if (_internal_has_snapshot_reply()) {
    clear_has_content();
    ::embkv::InstallSnapshotReply* temp = _impl_.content_.snapshot_reply_;
    _impl_.content_.snapshot_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_snapshot_reply(::embkv::InstallSnapshotReply* snapshot_reply) {
  clear_content();
  if (snapshot_reply) {
    set_has_snapshot_reply();
    _impl_.content_.snapshot_reply_ = snapshot_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:embkv.Message.snapshot_reply)
}
inline ::embkv::InstallSnapshotReply* Message::_internal_mutable_snapshot_reply() {
  if (!_internal_has_snapshot_reply()) {
    clear_content();
    set_has_snapshot_reply();
    _impl_.content_.snapshot_reply_ = CreateMaybeMessage< ::embkv::InstallSnapshotReply >(GetArenaForAllocation());
  }
  return _impl_.content_.snapshot_reply_;
}
inline ::embkv::InstallSnapshotReply* Message::mutable_snapshot_reply() {
  ::embkv::InstallSnapshotReply* _msg = _internal_mutable_snapshot_reply();
  // @@protoc_insertion_point(field_mutable:embkv.Message.snapshot_reply)
  return _msg;
}

// .embkv.ClientRequest client_request = 9;
inline bool Message::_internal_has_client_request() const {
  return content_case() == kClientRequest;
}
inline bool Message::has_client_request() const {
  return _internal_has_client_request();
}
inline void Message::set_has_client_request() {
  _impl_._oneof_case_[0] = kClientRequest;
}
inline void Message::clear_client_request() {
  if (_internal_has_client_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.client_request_;
    }
    clear_has_content();
  }
}
inline ::embkv::ClientRequest* Message::release_client_request() {
  // @@protoc_insertion_point(field_release:embkv.Message.client_request)
  if (_internal_has_client_request()) {
    clear_has_content();
    ::embkv::ClientRequest* temp = _impl_.content_.client_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.client_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::embkv::ClientRequest& Message::_internal_client_request() const {
  return _internal_has_client_request()
      ? *_impl_.content_.client_request_
      : reinterpret_cast< ::embkv::ClientRequest&>(::embkv::_ClientRequest_default_instance_);
}
inline const ::embkv::ClientRequest& Message::client_request() const {
  // @@protoc_insertion_point(field_get:embkv.Message.client_request)
  return _internal_client_request();
}
inline ::embkv::ClientRequest* Message::unsafe_arena_release_client_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:embkv.Message.client_request)
  if (_internal_has_client_request()) {
    clear_has_content();
    ::embkv::ClientRequest* temp = _impl_.content_.client_request_;
    _impl_.content_.client_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_client_request(::embkv::ClientRequest* client_request) {
  clear_content();
  if (client_request) {
    set_has_client_request();
    _impl_.content_.client_request_ = client_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:embkv.Message.client_request)
}
inline ::embkv::ClientRequest* Message::_internal_mutable_client_request() {
  if (!_internal_has_client_request()) {
    clear_content();
    set_has_client_request();
    _impl_.content_.client_request_ = CreateMaybeMessage< ::embkv::ClientRequest >(GetArenaForAllocation());
  }
  return _impl_.content_.client_request_;
}
inline ::embkv::ClientRequest* Message::mutable_client_request() {
  ::embkv::ClientRequest* _msg = _internal_mutable_client_request();
  // @@protoc_insertion_point(field_mutable:embkv.Message.client_request)
  return _msg;
}

// .embkv.ClientReply client_reply = 10;
inline bool Message::_internal_has_client_reply() const {
  return content_case() == kClientReply;
}
inline bool Message::has_client_reply() const {
  return _internal_has_client_reply();
}
inline void Message::set_has_client_reply() {
  _impl_._oneof_case_[0] = kClientReply;
}
inline void Message::clear_client_reply() {
  if (_internal_has_client_reply()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.client_reply_;
    }
    clear_has_content();
  }
}
inline ::embkv::ClientReply* Message::release_client_reply() {
  // @@protoc_insertion_point(field_release:embkv.Message.client_reply)
  if (_internal_has_client_reply()) {
    clear_has_content();
    ::embkv::ClientReply* temp = _impl_.content_.client_reply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.client_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::embkv::ClientReply& Message::_internal_client_reply() const {
  return _internal_has_client_reply()
      ? *_impl_.content_.client_reply_
      : reinterpret_cast< ::embkv::ClientReply&>(::embkv::_ClientReply_default_instance_);
}
inline const ::embkv::ClientReply& Message::client_reply() const {
  // @@protoc_insertion_point(field_get:embkv.Message.client_reply)
  return _internal_client_reply();
}
inline ::embkv::ClientReply* Message::unsafe_arena_release_client_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:embkv.Message.client_reply)
  if (_internal_has_client_reply()) {
    clear_has_content();
    ::embkv::ClientReply* temp = _impl_.content_.client_reply_;
    _impl_.content_.client_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_client_reply(::embkv::ClientReply* client_reply) {
  clear_content();
  if (client_reply) {
    set_has_client_reply();
    _impl_.content_.client_reply_ = client_reply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:embkv.Message.client_reply)
}
inline ::embkv::ClientReply* Message::_internal_mutable_client_reply() {
  if (!_internal_has_client_reply()) {
    clear_content();
    set_has_client_reply();
    _impl_.content_.client_reply_ = CreateMaybeMessage< ::embkv::ClientReply >(GetArenaForAllocation());
  }
  return _impl_.content_.client_reply_;
}
inline ::embkv::ClientReply* Message::mutable_client_reply() {
  ::embkv::ClientReply* _msg = _internal_mutable_client_reply();
  // @@protoc_insertion_point(field_mutable:embkv.Message.client_reply)
  return _msg;
}

inline bool Message::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Message::clear_has_content() {
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}
inline Message::ContentCase Message::content_case() const {
  return Message::ContentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// LogEntry

// uint64 term = 1;
inline void LogEntry::clear_term() {
  _impl_.term_ = uint64_t{0u};
}
inline uint64_t LogEntry::_internal_term() const {
  return _impl_.term_;
}
inline uint64_t LogEntry::term() const {
  // @@protoc_insertion_point(field_get:embkv.LogEntry.term)
  return _internal_term();
}
inline void LogEntry::_internal_set_term(uint64_t value) {
  
  _impl_.term_ = value;
}
inline void LogEntry::set_term(uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:embkv.LogEntry.term)
}

// uint64 index = 2;
inline void LogEntry::clear_index() {
  _impl_.index_ = uint64_t{0u};
}
inline uint64_t LogEntry::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t LogEntry::index() const {
  // @@protoc_insertion_point(field_get:embkv.LogEntry.index)
  return _internal_index();
}
inline void LogEntry::_internal_set_index(uint64_t value) {
  
  _impl_.index_ = value;
}
inline void LogEntry::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:embkv.LogEntry.index)
}

// bytes client_request = 3;
inline void LogEntry::clear_client_request() {
  _impl_.client_request_.ClearToEmpty();
}
inline const std::string& LogEntry::client_request() const {
  // @@protoc_insertion_point(field_get:embkv.LogEntry.client_request)
  return _internal_client_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntry::set_client_request(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_request_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:embkv.LogEntry.client_request)
}
inline std::string* LogEntry::mutable_client_request() {
  std::string* _s = _internal_mutable_client_request();
  // @@protoc_insertion_point(field_mutable:embkv.LogEntry.client_request)
  return _s;
}
inline const std::string& LogEntry::_internal_client_request() const {
  return _impl_.client_request_.Get();
}
inline void LogEntry::_internal_set_client_request(const std::string& value) {
  
  _impl_.client_request_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntry::_internal_mutable_client_request() {
  
  return _impl_.client_request_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntry::release_client_request() {
  // @@protoc_insertion_point(field_release:embkv.LogEntry.client_request)
  return _impl_.client_request_.Release();
}
inline void LogEntry::set_allocated_client_request(std::string* client_request) {
  if (client_request != nullptr) {
    
  } else {
    
  }
  _impl_.client_request_.SetAllocated(client_request, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_request_.IsDefault()) {
    _impl_.client_request_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:embkv.LogEntry.client_request)
}

// -------------------------------------------------------------------

// VoteRequest

// uint64 term = 1;
inline void VoteRequest::clear_term() {
  _impl_.term_ = uint64_t{0u};
}
inline uint64_t VoteRequest::_internal_term() const {
  return _impl_.term_;
}
inline uint64_t VoteRequest::term() const {
  // @@protoc_insertion_point(field_get:embkv.VoteRequest.term)
  return _internal_term();
}
inline void VoteRequest::_internal_set_term(uint64_t value) {
  
  _impl_.term_ = value;
}
inline void VoteRequest::set_term(uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:embkv.VoteRequest.term)
}

// uint64 last_log_index = 2;
inline void VoteRequest::clear_last_log_index() {
  _impl_.last_log_index_ = uint64_t{0u};
}
inline uint64_t VoteRequest::_internal_last_log_index() const {
  return _impl_.last_log_index_;
}
inline uint64_t VoteRequest::last_log_index() const {
  // @@protoc_insertion_point(field_get:embkv.VoteRequest.last_log_index)
  return _internal_last_log_index();
}
inline void VoteRequest::_internal_set_last_log_index(uint64_t value) {
  
  _impl_.last_log_index_ = value;
}
inline void VoteRequest::set_last_log_index(uint64_t value) {
  _internal_set_last_log_index(value);
  // @@protoc_insertion_point(field_set:embkv.VoteRequest.last_log_index)
}

// uint64 last_log_term = 3;
inline void VoteRequest::clear_last_log_term() {
  _impl_.last_log_term_ = uint64_t{0u};
}
inline uint64_t VoteRequest::_internal_last_log_term() const {
  return _impl_.last_log_term_;
}
inline uint64_t VoteRequest::last_log_term() const {
  // @@protoc_insertion_point(field_get:embkv.VoteRequest.last_log_term)
  return _internal_last_log_term();
}
inline void VoteRequest::_internal_set_last_log_term(uint64_t value) {
  
  _impl_.last_log_term_ = value;
}
inline void VoteRequest::set_last_log_term(uint64_t value) {
  _internal_set_last_log_term(value);
  // @@protoc_insertion_point(field_set:embkv.VoteRequest.last_log_term)
}

// -------------------------------------------------------------------

// VoteReply

// uint64 term = 1;
inline void VoteReply::clear_term() {
  _impl_.term_ = uint64_t{0u};
}
inline uint64_t VoteReply::_internal_term() const {
  return _impl_.term_;
}
inline uint64_t VoteReply::term() const {
  // @@protoc_insertion_point(field_get:embkv.VoteReply.term)
  return _internal_term();
}
inline void VoteReply::_internal_set_term(uint64_t value) {
  
  _impl_.term_ = value;
}
inline void VoteReply::set_term(uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:embkv.VoteReply.term)
}

// bool granted = 2;
inline void VoteReply::clear_granted() {
  _impl_.granted_ = false;
}
inline bool VoteReply::_internal_granted() const {
  return _impl_.granted_;
}
inline bool VoteReply::granted() const {
  // @@protoc_insertion_point(field_get:embkv.VoteReply.granted)
  return _internal_granted();
}
inline void VoteReply::_internal_set_granted(bool value) {
  
  _impl_.granted_ = value;
}
inline void VoteReply::set_granted(bool value) {
  _internal_set_granted(value);
  // @@protoc_insertion_point(field_set:embkv.VoteReply.granted)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// uint64 term = 1;
inline void AppendEntriesRequest::clear_term() {
  _impl_.term_ = uint64_t{0u};
}
inline uint64_t AppendEntriesRequest::_internal_term() const {
  return _impl_.term_;
}
inline uint64_t AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:embkv.AppendEntriesRequest.term)
  return _internal_term();
}
inline void AppendEntriesRequest::_internal_set_term(uint64_t value) {
  
  _impl_.term_ = value;
}
inline void AppendEntriesRequest::set_term(uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:embkv.AppendEntriesRequest.term)
}

// uint64 prev_log_index = 2;
inline void AppendEntriesRequest::clear_prev_log_index() {
  _impl_.prev_log_index_ = uint64_t{0u};
}
inline uint64_t AppendEntriesRequest::_internal_prev_log_index() const {
  return _impl_.prev_log_index_;
}
inline uint64_t AppendEntriesRequest::prev_log_index() const {
  // @@protoc_insertion_point(field_get:embkv.AppendEntriesRequest.prev_log_index)
  return _internal_prev_log_index();
}
inline void AppendEntriesRequest::_internal_set_prev_log_index(uint64_t value) {
  
  _impl_.prev_log_index_ = value;
}
inline void AppendEntriesRequest::set_prev_log_index(uint64_t value) {
  _internal_set_prev_log_index(value);
  // @@protoc_insertion_point(field_set:embkv.AppendEntriesRequest.prev_log_index)
}

// uint64 prev_log_term = 3;
inline void AppendEntriesRequest::clear_prev_log_term() {
  _impl_.prev_log_term_ = uint64_t{0u};
}
inline uint64_t AppendEntriesRequest::_internal_prev_log_term() const {
  return _impl_.prev_log_term_;
}
inline uint64_t AppendEntriesRequest::prev_log_term() const {
  // @@protoc_insertion_point(field_get:embkv.AppendEntriesRequest.prev_log_term)
  return _internal_prev_log_term();
}
inline void AppendEntriesRequest::_internal_set_prev_log_term(uint64_t value) {
  
  _impl_.prev_log_term_ = value;
}
inline void AppendEntriesRequest::set_prev_log_term(uint64_t value) {
  _internal_set_prev_log_term(value);
  // @@protoc_insertion_point(field_set:embkv.AppendEntriesRequest.prev_log_term)
}

// repeated .embkv.LogEntry entries = 4;
inline int AppendEntriesRequest::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int AppendEntriesRequest::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesRequest::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::embkv::LogEntry* AppendEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:embkv.AppendEntriesRequest.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::embkv::LogEntry >*
AppendEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:embkv.AppendEntriesRequest.entries)
  return &_impl_.entries_;
}
inline const ::embkv::LogEntry& AppendEntriesRequest::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::embkv::LogEntry& AppendEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:embkv.AppendEntriesRequest.entries)
  return _internal_entries(index);
}
inline ::embkv::LogEntry* AppendEntriesRequest::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::embkv::LogEntry* AppendEntriesRequest::add_entries() {
  ::embkv::LogEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:embkv.AppendEntriesRequest.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::embkv::LogEntry >&
AppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:embkv.AppendEntriesRequest.entries)
  return _impl_.entries_;
}

// uint64 leader_commit = 5;
inline void AppendEntriesRequest::clear_leader_commit() {
  _impl_.leader_commit_ = uint64_t{0u};
}
inline uint64_t AppendEntriesRequest::_internal_leader_commit() const {
  return _impl_.leader_commit_;
}
inline uint64_t AppendEntriesRequest::leader_commit() const {
  // @@protoc_insertion_point(field_get:embkv.AppendEntriesRequest.leader_commit)
  return _internal_leader_commit();
}
inline void AppendEntriesRequest::_internal_set_leader_commit(uint64_t value) {
  
  _impl_.leader_commit_ = value;
}
inline void AppendEntriesRequest::set_leader_commit(uint64_t value) {
  _internal_set_leader_commit(value);
  // @@protoc_insertion_point(field_set:embkv.AppendEntriesRequest.leader_commit)
}

// bool is_heartbeat = 6;
inline void AppendEntriesRequest::clear_is_heartbeat() {
  _impl_.is_heartbeat_ = false;
}
inline bool AppendEntriesRequest::_internal_is_heartbeat() const {
  return _impl_.is_heartbeat_;
}
inline bool AppendEntriesRequest::is_heartbeat() const {
  // @@protoc_insertion_point(field_get:embkv.AppendEntriesRequest.is_heartbeat)
  return _internal_is_heartbeat();
}
inline void AppendEntriesRequest::_internal_set_is_heartbeat(bool value) {
  
  _impl_.is_heartbeat_ = value;
}
inline void AppendEntriesRequest::set_is_heartbeat(bool value) {
  _internal_set_is_heartbeat(value);
  // @@protoc_insertion_point(field_set:embkv.AppendEntriesRequest.is_heartbeat)
}

// -------------------------------------------------------------------

// AppendEntriesReply

// uint64 term = 1;
inline void AppendEntriesReply::clear_term() {
  _impl_.term_ = uint64_t{0u};
}
inline uint64_t AppendEntriesReply::_internal_term() const {
  return _impl_.term_;
}
inline uint64_t AppendEntriesReply::term() const {
  // @@protoc_insertion_point(field_get:embkv.AppendEntriesReply.term)
  return _internal_term();
}
inline void AppendEntriesReply::_internal_set_term(uint64_t value) {
  
  _impl_.term_ = value;
}
inline void AppendEntriesReply::set_term(uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:embkv.AppendEntriesReply.term)
}

// bool success = 2;
inline void AppendEntriesReply::clear_success() {
  _impl_.success_ = false;
}
inline bool AppendEntriesReply::_internal_success() const {
  return _impl_.success_;
}
inline bool AppendEntriesReply::success() const {
  // @@protoc_insertion_point(field_get:embkv.AppendEntriesReply.success)
  return _internal_success();
}
inline void AppendEntriesReply::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void AppendEntriesReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:embkv.AppendEntriesReply.success)
}

// uint64 conflict_index = 3;
inline void AppendEntriesReply::clear_conflict_index() {
  _impl_.conflict_index_ = uint64_t{0u};
}
inline uint64_t AppendEntriesReply::_internal_conflict_index() const {
  return _impl_.conflict_index_;
}
inline uint64_t AppendEntriesReply::conflict_index() const {
  // @@protoc_insertion_point(field_get:embkv.AppendEntriesReply.conflict_index)
  return _internal_conflict_index();
}
inline void AppendEntriesReply::_internal_set_conflict_index(uint64_t value) {
  
  _impl_.conflict_index_ = value;
}
inline void AppendEntriesReply::set_conflict_index(uint64_t value) {
  _internal_set_conflict_index(value);
  // @@protoc_insertion_point(field_set:embkv.AppendEntriesReply.conflict_index)
}

// uint64 last_log_index = 4;
inline void AppendEntriesReply::clear_last_log_index() {
  _impl_.last_log_index_ = uint64_t{0u};
}
inline uint64_t AppendEntriesReply::_internal_last_log_index() const {
  return _impl_.last_log_index_;
}
inline uint64_t AppendEntriesReply::last_log_index() const {
  // @@protoc_insertion_point(field_get:embkv.AppendEntriesReply.last_log_index)
  return _internal_last_log_index();
}
inline void AppendEntriesReply::_internal_set_last_log_index(uint64_t value) {
  
  _impl_.last_log_index_ = value;
}
inline void AppendEntriesReply::set_last_log_index(uint64_t value) {
  _internal_set_last_log_index(value);
  // @@protoc_insertion_point(field_set:embkv.AppendEntriesReply.last_log_index)
}

// -------------------------------------------------------------------

// InstallSnapshotRequest

// uint64 term = 1;
inline void InstallSnapshotRequest::clear_term() {
  _impl_.term_ = uint64_t{0u};
}
inline uint64_t InstallSnapshotRequest::_internal_term() const {
  return _impl_.term_;
}
inline uint64_t InstallSnapshotRequest::term() const {
  // @@protoc_insertion_point(field_get:embkv.InstallSnapshotRequest.term)
  return _internal_term();
}
inline void InstallSnapshotRequest::_internal_set_term(uint64_t value) {
  
  _impl_.term_ = value;
}
inline void InstallSnapshotRequest::set_term(uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:embkv.InstallSnapshotRequest.term)
}

// uint64 snapshot_index = 2;
inline void InstallSnapshotRequest::clear_snapshot_index() {
  _impl_.snapshot_index_ = uint64_t{0u};
}
inline uint64_t InstallSnapshotRequest::_internal_snapshot_index() const {
  return _impl_.snapshot_index_;
}
inline uint64_t InstallSnapshotRequest::snapshot_index() const {
  // @@protoc_insertion_point(field_get:embkv.InstallSnapshotRequest.snapshot_index)
  return _internal_snapshot_index();
}
inline void InstallSnapshotRequest::_internal_set_snapshot_index(uint64_t value) {
  
  _impl_.snapshot_index_ = value;
}
inline void InstallSnapshotRequest::set_snapshot_index(uint64_t value) {
  _internal_set_snapshot_index(value);
  // @@protoc_insertion_point(field_set:embkv.InstallSnapshotRequest.snapshot_index)
}

// bytes snapshot_data = 3;
inline void InstallSnapshotRequest::clear_snapshot_data() {
  _impl_.snapshot_data_.ClearToEmpty();
}
inline const std::string& InstallSnapshotRequest::snapshot_data() const {
  // @@protoc_insertion_point(field_get:embkv.InstallSnapshotRequest.snapshot_data)
  return _internal_snapshot_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstallSnapshotRequest::set_snapshot_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.snapshot_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:embkv.InstallSnapshotRequest.snapshot_data)
}
inline std::string* InstallSnapshotRequest::mutable_snapshot_data() {
  std::string* _s = _internal_mutable_snapshot_data();
  // @@protoc_insertion_point(field_mutable:embkv.InstallSnapshotRequest.snapshot_data)
  return _s;
}
inline const std::string& InstallSnapshotRequest::_internal_snapshot_data() const {
  return _impl_.snapshot_data_.Get();
}
inline void InstallSnapshotRequest::_internal_set_snapshot_data(const std::string& value) {
  
  _impl_.snapshot_data_.Set(value, GetArenaForAllocation());
}
inline std::string* InstallSnapshotRequest::_internal_mutable_snapshot_data() {
  
  return _impl_.snapshot_data_.Mutable(GetArenaForAllocation());
}
inline std::string* InstallSnapshotRequest::release_snapshot_data() {
  // @@protoc_insertion_point(field_release:embkv.InstallSnapshotRequest.snapshot_data)
  return _impl_.snapshot_data_.Release();
}
inline void InstallSnapshotRequest::set_allocated_snapshot_data(std::string* snapshot_data) {
  if (snapshot_data != nullptr) {
    
  } else {
    
  }
  _impl_.snapshot_data_.SetAllocated(snapshot_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.snapshot_data_.IsDefault()) {
    _impl_.snapshot_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:embkv.InstallSnapshotRequest.snapshot_data)
}

// -------------------------------------------------------------------

// InstallSnapshotReply

// bool success = 1;
inline void InstallSnapshotReply::clear_success() {
  _impl_.success_ = false;
}
inline bool InstallSnapshotReply::_internal_success() const {
  return _impl_.success_;
}
inline bool InstallSnapshotReply::success() const {
  // @@protoc_insertion_point(field_get:embkv.InstallSnapshotReply.success)
  return _internal_success();
}
inline void InstallSnapshotReply::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void InstallSnapshotReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:embkv.InstallSnapshotReply.success)
}

// -------------------------------------------------------------------

// ClientRequest

// uint64 request_id = 1;
inline void ClientRequest::clear_request_id() {
  _impl_.request_id_ = uint64_t{0u};
}
inline uint64_t ClientRequest::_internal_request_id() const {
  return _impl_.request_id_;
}
inline uint64_t ClientRequest::request_id() const {
  // @@protoc_insertion_point(field_get:embkv.ClientRequest.request_id)
  return _internal_request_id();
}
inline void ClientRequest::_internal_set_request_id(uint64_t value) {
  
  _impl_.request_id_ = value;
}
inline void ClientRequest::set_request_id(uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:embkv.ClientRequest.request_id)
}

// bytes command = 2;
inline void ClientRequest::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& ClientRequest::command() const {
  // @@protoc_insertion_point(field_get:embkv.ClientRequest.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientRequest::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:embkv.ClientRequest.command)
}
inline std::string* ClientRequest::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:embkv.ClientRequest.command)
  return _s;
}
inline const std::string& ClientRequest::_internal_command() const {
  return _impl_.command_.Get();
}
inline void ClientRequest::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientRequest::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientRequest::release_command() {
  // @@protoc_insertion_point(field_release:embkv.ClientRequest.command)
  return _impl_.command_.Release();
}
inline void ClientRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:embkv.ClientRequest.command)
}

// -------------------------------------------------------------------

// ClientReply

// uint64 request_id = 1;
inline void ClientReply::clear_request_id() {
  _impl_.request_id_ = uint64_t{0u};
}
inline uint64_t ClientReply::_internal_request_id() const {
  return _impl_.request_id_;
}
inline uint64_t ClientReply::request_id() const {
  // @@protoc_insertion_point(field_get:embkv.ClientReply.request_id)
  return _internal_request_id();
}
inline void ClientReply::_internal_set_request_id(uint64_t value) {
  
  _impl_.request_id_ = value;
}
inline void ClientReply::set_request_id(uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:embkv.ClientReply.request_id)
}

// uint64 leader_hint = 2;
inline void ClientReply::clear_leader_hint() {
  _impl_.leader_hint_ = uint64_t{0u};
}
inline uint64_t ClientReply::_internal_leader_hint() const {
  return _impl_.leader_hint_;
}
inline uint64_t ClientReply::leader_hint() const {
  // @@protoc_insertion_point(field_get:embkv.ClientReply.leader_hint)
  return _internal_leader_hint();
}
inline void ClientReply::_internal_set_leader_hint(uint64_t value) {
  
  _impl_.leader_hint_ = value;
}
inline void ClientReply::set_leader_hint(uint64_t value) {
  _internal_set_leader_hint(value);
  // @@protoc_insertion_point(field_set:embkv.ClientReply.leader_hint)
}

// bool success = 3;
inline void ClientReply::clear_success() {
  _impl_.success_ = false;
}
inline bool ClientReply::_internal_success() const {
  return _impl_.success_;
}
inline bool ClientReply::success() const {
  // @@protoc_insertion_point(field_get:embkv.ClientReply.success)
  return _internal_success();
}
inline void ClientReply::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void ClientReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:embkv.ClientReply.success)
}

// bytes result = 4;
inline void ClientReply::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ClientReply::result() const {
  // @@protoc_insertion_point(field_get:embkv.ClientReply.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientReply::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:embkv.ClientReply.result)
}
inline std::string* ClientReply::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:embkv.ClientReply.result)
  return _s;
}
inline const std::string& ClientReply::_internal_result() const {
  return _impl_.result_.Get();
}
inline void ClientReply::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientReply::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientReply::release_result() {
  // @@protoc_insertion_point(field_release:embkv.ClientReply.result)
  return _impl_.result_.Release();
}
inline void ClientReply::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:embkv.ClientReply.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace embkv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
